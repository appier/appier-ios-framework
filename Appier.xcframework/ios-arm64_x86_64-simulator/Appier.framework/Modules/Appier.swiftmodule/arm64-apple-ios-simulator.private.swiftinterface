// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Appier
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
@_exported import Appier
import CommonCrypto
import CoreData
import CoreGraphics
import CoreLocation
import CoreTelephony
import Dispatch
import Foundation
import Network
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os
import zlib
public enum PageType {
  case top
  case category
  case search
  case item
  case cart
  case cartForm
  case conversion
  case myPage
  case login
  case registrationForm
  case registration
  case custom(Swift.String)
}
extension Appier.PageType : Swift.RawRepresentable {
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
extension Appier.PageType : Swift.Codable, Swift.Hashable {
}
extension Appier.PageType : Swift.CaseIterable {
  public static var allCases: [Appier.PageType]
  public typealias AllCases = [Appier.PageType]
}
public struct BadgeConfiguration {
  public var allowsDisplay: Swift.Bool
  public var area: Appier.BadgeDisplayArea
  public var insetsFromArea: UIKit.UIEdgeInsets
  public var positionOverride: Appier.BadgePositionOverride
  public init()
}
public enum BadgeDisplayArea {
  @available(iOS, deprecated: 11)
  case insideLayoutGuides
  @available(iOS 11, *)
  case safeArea
  case screen
  case custom(CoreFoundation.CGRect)
}
public enum BadgePositionOverride {
  case none
  case offset(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat)
  case custom(CoreFoundation.CGPoint)
  case bottomLeftCorner
  case bottomRightCorner
}
@objc(AIDAction) @objcMembers public class Action : ObjectiveC.NSObject {
  @objc final public let rawValue: Swift.String
  @objc required public init(rawValue: Swift.String)
  @objc deinit
}
extension Appier.Action : Swift.RawRepresentable {
  @objc public static let didRedeemCoupon: Appier.Action
  @objc public static let didAddToCart: Appier.Action
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers @objc(AIDAiDeal) @objcMembers final public class AiDeal : ObjectiveC.NSObject {
  @objc final public var configuration: Appier.AiDealConfiguration
  @objc final public func configure(apiKey: Swift.String)
  @objc(startLoggingWithViewController:) final public func startLogging(_ viewController: UIKit.UIViewController)
  @objc(startLoggingWithViewController:scrollView:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:scrollView:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?)
  @objc(startLoggingWithViewController:webView:) final public func startLogging(_ viewController: UIKit.UIViewController, webView: WebKit.WKWebView)
  @objc final public func stopLogging()
  @objc(logConversion:) final public func log(_ conversion: Appier.Conversion)
  @objc(logAction:) final public func log(_ action: Appier.Action)
  @objc(setDataCollection:) final public func setDataCollection(_ enabled: Swift.Bool)
  @objc(openURL:) final public func open(_ url: Foundation.URL)
  @objc(viewWillTransitionWithTransitionCoordinator:) final public func viewWillTransition(with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc public static let shared: Appier.AiDeal
  @objc public static let offerButtonTappedNotification: Foundation.Notification.Name
  @objc public static let configurationDidChangeNotification: Foundation.Notification.Name
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AIDConfiguration) @objcMembers public class AiDealConfiguration : ObjectiveC.NSObject {
  public var badge: Appier.BadgeConfiguration {
    get
    set
  }
  @objc public func setAllowsBadgeDisplay(_ flag: Swift.Bool)
  @objc public func setInsetsFromArea(_ insets: UIKit.UIEdgeInsets)
  @objc public func setBadgeDisplayAreaToInsideLayoutGuides()
  @objc @available(iOS 11, *)
  public func setBadgeDisplayAreaToSafeArea()
  @objc public func setBadgeDisplayAreaToScreen()
  @objc public func setBadgeDisplayArea(_ rect: CoreFoundation.CGRect)
  @objc(offsetBadgePositionByX:Y:) public func offsetBadgePositionBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc public func setBadgePosition(_ point: CoreFoundation.CGPoint)
  @objc public func resetBadgePosition()
  @objc override dynamic public init()
  @objc deinit
}
@objc(AIDConversion) @objcMembers final public class Conversion : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let identifier: Swift.String
  @objc final public var name: Swift.String?
  @objc final public var totalQuantity: Swift.Int
  @objc final public var totalPrice: Swift.Double
  @objc final public var couponCodes: [Swift.String]
  @objc final public var items: [Appier.ConversionItem]
  @objc @available(*, deprecated, renamed: "identifier")
  final public var conversionId: Swift.String {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "name")
  final public var conversionName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "numberOfItems")
  final public var totalItems: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(AIDConversionItem) @objcMembers final public class ConversionItem : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let identifier: Swift.String
  @objc final public var name: Swift.String?
  @objc final public var url: Foundation.URL?
  @objc final public var price: Swift.Double
  @objc final public var quantity: Swift.Int
  @objc @available(*, deprecated, renamed: "quantity")
  final public var count: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, renamed: "ConversionItem")
public typealias AIDConversionItem = Appier.ConversionItem
@_inheritsConvenienceInitializers @objc public class AppierResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Appier.Logger {
  @objc(aiquaNotificationLogger) public static let aiquaNotification: Appier.Logger
}
@objc public protocol AIQLocationUpdateDelegate {
  @objc(locationUpdatedWith:) func locationUpdated(location: [Swift.AnyHashable : Any]?)
}
@objc public protocol AIQGeofenceMonitoringDelegate {
  @objc func didStartMonitoring(regionIdentifier: Swift.String)
  @objc func monitoringDidFail(regionIdentifier: Swift.String?, error: any Swift.Error)
  @objc func didEnterRegion(identifier: Swift.String, location: CoreLocation.CLLocation)
  @objc func didExitRegion(identifier: Swift.String, location: CoreLocation.CLLocation)
  @objc func locationAuthorizationDidChange()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class AIQLocationManager : ObjectiveC.NSObject {
  @objc public static let shared: Appier.AIQLocationManager
  @objc weak public var locationDelegate: (any Appier.AIQLocationUpdateDelegate)?
  @objc weak public var geofenceDelegate: (any Appier.AIQGeofenceMonitoringDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
extension Appier.AIQLocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @available(iOS 14.0, *)
  @objc dynamic public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didStartMonitoringFor region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, monitoringDidFailFor region: CoreLocation.CLRegion?, withError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didEnterRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
}
@objc public protocol AIQSilentPushHandlerDelegate {
  @objc func updateInAppCampaign(userInfo: [Swift.AnyHashable : Any], completion: @escaping () -> Swift.Void)
  @objc func updateGeofence(userInfo: [Swift.AnyHashable : Any], completion: @escaping () -> Swift.Void)
}
@objc public protocol AIQSilentPushHandlerProtocol {
  @objc weak var delegate: (any Appier.AIQSilentPushHandlerDelegate)? { get set }
  @objc func execute(completion: @escaping () -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AIQSilentPushManager : ObjectiveC.NSObject {
  @objc public func parse(payload: [Swift.AnyHashable : Any]?) -> [any Appier.AIQSilentPushHandlerProtocol]
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class AIQSilentPushUpdateGeofenceHandler : Appier.AIQSilentPushHandlerProtocol {
  @objc weak public var delegate: (any Appier.AIQSilentPushHandlerDelegate)?
  @objc public func execute(completion: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class AIQSilentPushUpdateInAppCampaignHandler : Appier.AIQSilentPushHandlerProtocol {
  @objc weak public var delegate: (any Appier.AIQSilentPushHandlerDelegate)?
  @objc public func execute(completion: @escaping () -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AIQUALocalStorage : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public static var shared: Appier.AIQUALocalStorage
  @objc override convenience dynamic public init()
  @objc public init(suiteName: Swift.String)
  @objc public func updateSuiteNameIfNeeded(_ suiteName: Swift.String)
  @objc deinit
}
extension Appier.AIQUALocalStorage : Appier.AIQUAStorage {
  @objc dynamic public func clean()
  @objc dynamic public var devProfile: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var appID: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasAppID: Swift.Bool {
    @objc get
  }
  @objc dynamic public var appSecret: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public var appVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasAppVersion: Swift.Bool {
    @objc get
  }
  @objc dynamic public var deviceToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var crossPlatformFrameworkSdkType: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var crossPlatformFrameworkSdkVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var appierID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasAppierID: Swift.Bool {
    @objc get
  }
  @objc dynamic public var appierIdCreateTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasAppierIdCreateTime: Swift.Bool {
    @objc get
  }
  @objc dynamic public var universalLinkDomains: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc dynamic public var isRichPushSupported: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var lastViewThroughTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasLastViewThroughTime: Swift.Bool {
    @objc get
  }
  @objc dynamic public var lastClickedNotificationTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasLastClickedNotificationTime: Swift.Bool {
    @objc get
  }
  @objc dynamic public var lastClickedNotificationID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var lastViewThroughNotificationID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var viewThroughAttributionWindow: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasViewThroughAttributionWindow: Swift.Bool {
    @objc get
  }
  @objc dynamic public var clickAttributionWindow: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasClickAttributionWindow: Swift.Bool {
    @objc get
  }
  @objc dynamic public var lastLocation: [Swift.String : [Foundation.NSNumber]]? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasLastLocation: Swift.Bool {
    @objc get
  }
  @objc dynamic public var sdkVersionKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasSdkVersionKey: Swift.Bool {
    @objc get
  }
  @objc dynamic public var sendIdfaWithConsent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var userDetailsLastSentTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasUserDetailsLastSentTime: Swift.Bool {
    @objc get
  }
  @objc dynamic public var optoutStatus: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasOptoutStatus: Swift.Bool {
    @objc get
  }
  @available(iOS 14.0, *)
  @objc dynamic public var adsTrackingStatus: AppTrackingTransparency.ATTrackingManager.AuthorizationStatus {
    @objc get
    @objc set
  }
  @available(iOS 14.0, *)
  @objc dynamic public var hasAdsTrackingStatus: Swift.Bool {
    @objc get
  }
  @objc dynamic public var personalizationConfig: [Swift.AnyHashable : Any]? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasPersonalizationConfig: Swift.Bool {
    @objc get
  }
  @objc dynamic public var personalizationDisabledStatus: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var hasPersonalizationDisabledStatus: Swift.Bool {
    @objc get
  }
  @objc dynamic public var geofences: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var isGeofenceCapable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var inbox: [Swift.AnyHashable : Any]? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasInbox: Swift.Bool {
    @objc get
  }
  @objc dynamic public var inboxLimit: Swift.Int {
    @objc get
    @objc set
  }
  @objc dynamic public var hasInboxLimit: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isNotFirstAppBackground: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var forceTouchCapabilityStatus: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var inAppDisabledStatus: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var inApp: Appier.AIQMutableOrderedDictionary? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasInApp: Swift.Bool {
    @objc get
  }
  @objc dynamic public var inAppFirstAppLaunchedMatched: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var crashLogKey: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc dynamic public var savedPushNotifications: [[Swift.AnyHashable : Any]]? {
    @objc get
    @objc set
  }
  @objc dynamic public var hasSavedPushNotifications: Swift.Bool {
    @objc get
  }
  @objc dynamic public var savedPushNotificationLimit: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc dynamic public var isSavedPushNotificationEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var richPushDeeplink: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var firstAppLaunch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var endpointUserServer: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var endpointDback: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var endpointRecommendation: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var endpointPersonalization: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var failedPushEventStack: [[Swift.AnyHashable : Any]]? {
    @objc get
    @objc set
  }
  @objc dynamic public var exitPushPayload: Foundation.Data? {
    @objc get
    @objc set
  }
}
extension Appier.AIQUALocalStorage {
  @objc dynamic public func save(value: Any?, key: Swift.String)
  @objc dynamic public func getValue(for key: Swift.String) -> Any?
}
@objc public protocol AIQUAStorage {
  @objc func clean()
  @objc var devProfile: Swift.Bool { get set }
  @objc var appID: Swift.String? { get set }
  @objc var hasAppID: Swift.Bool { get }
  @objc var appSecret: Swift.String { get set }
  @objc var appVersion: Swift.String? { get set }
  @objc var hasAppVersion: Swift.Bool { get }
  @objc var deviceToken: Swift.String? { get set }
  @objc var crossPlatformFrameworkSdkType: Swift.String? { get set }
  @objc var crossPlatformFrameworkSdkVersion: Swift.String? { get set }
  @objc var appierID: Foundation.NSNumber? { get set }
  @objc var hasAppierID: Swift.Bool { get }
  @objc var appierIdCreateTime: Foundation.Date? { get set }
  @objc var hasAppierIdCreateTime: Swift.Bool { get }
  @objc var universalLinkDomains: [Swift.String]? { get set }
  @objc var isRichPushSupported: Swift.Bool { get set }
  @objc var lastViewThroughTime: Foundation.Date? { get set }
  @objc var hasLastViewThroughTime: Swift.Bool { get }
  @objc var lastClickedNotificationTime: Foundation.Date? { get set }
  @objc var hasLastClickedNotificationTime: Swift.Bool { get }
  @objc var lastClickedNotificationID: Foundation.NSNumber? { get set }
  @objc var lastViewThroughNotificationID: Foundation.NSNumber? { get set }
  @objc var viewThroughAttributionWindow: Foundation.NSNumber? { get set }
  @objc var hasViewThroughAttributionWindow: Swift.Bool { get }
  @objc var clickAttributionWindow: Foundation.NSNumber? { get set }
  @objc var hasClickAttributionWindow: Swift.Bool { get }
  @objc var lastLocation: [Swift.String : [Foundation.NSNumber]]? { get set }
  @objc var hasLastLocation: Swift.Bool { get }
  @objc var sdkVersionKey: Swift.String? { get set }
  @objc var hasSdkVersionKey: Swift.Bool { get }
  @objc var sendIdfaWithConsent: Swift.Bool { get set }
  @objc var userDetailsLastSentTime: Foundation.Date? { get set }
  @objc var hasUserDetailsLastSentTime: Swift.Bool { get }
  @objc var optoutStatus: Foundation.NSNumber? { get set }
  @objc var hasOptoutStatus: Swift.Bool { get }
  @objc @available(iOS 14.0, *)
  var adsTrackingStatus: AppTrackingTransparency.ATTrackingManager.AuthorizationStatus { get set }
  @objc @available(iOS 14.0, *)
  var hasAdsTrackingStatus: Swift.Bool { get }
  @objc var personalizationConfig: [Swift.AnyHashable : Any]? { get set }
  @objc var hasPersonalizationConfig: Swift.Bool { get }
  @objc var personalizationDisabledStatus: Swift.Bool { get set }
  @objc var hasPersonalizationDisabledStatus: Swift.Bool { get }
  @objc var geofences: Swift.String? { get set }
  @objc var isGeofenceCapable: Swift.Bool { get set }
  @objc var inbox: [Swift.AnyHashable : Any]? { get set }
  @objc var hasInbox: Swift.Bool { get }
  @objc var inboxLimit: Swift.Int { get set }
  @objc var hasInboxLimit: Swift.Bool { get }
  @objc var isNotFirstAppBackground: Swift.Bool { get set }
  @objc var forceTouchCapabilityStatus: Swift.Bool { get set }
  @objc var inAppDisabledStatus: Swift.Bool { get set }
  @objc var inApp: Appier.AIQMutableOrderedDictionary? { get set }
  @objc var hasInApp: Swift.Bool { get }
  @objc var inAppFirstAppLaunchedMatched: Swift.Bool { get set }
  @objc var crashLogKey: [Swift.String]? { get set }
  @objc var savedPushNotifications: [[Swift.AnyHashable : Any]]? { get set }
  @objc var hasSavedPushNotifications: Swift.Bool { get }
  @objc var savedPushNotificationLimit: Foundation.NSNumber { get set }
  @objc var isSavedPushNotificationEnabled: Swift.Bool { get set }
  @objc var richPushDeeplink: Swift.String? { get set }
  @objc var firstAppLaunch: Swift.Bool { get set }
  @objc var endpointUserServer: Swift.String? { get set }
  @objc var endpointDback: Swift.String? { get set }
  @objc var endpointRecommendation: Swift.String? { get set }
  @objc var endpointPersonalization: Swift.String? { get set }
  @objc var failedPushEventStack: [[Swift.AnyHashable : Any]]? { get set }
  @objc var exitPushPayload: Foundation.Data? { get set }
}
@_inheritsConvenienceInitializers @objc(QGConstant) @objcMembers public class Constant : ObjectiveC.NSObject {
  @objc public static let QG_SDK_VERSION: Swift.String
  @objc public static let AIQ_SDK_VERSION_KEY: Swift.String
  @objc public static let AIQ_SDK_SUB_TYPE_KEY: Swift.String
  @objc public static let AIQ_SDK_SUB_TYPE_IOS: Swift.String
  @objc public static let AIQ_SDK_SUB_VERSION_KEY: Swift.String
  @objc public static let QG_APP_VERSION: Swift.String
  @objc public static let QG_LAST_CLICKED_NOTIFICATION_ID: Swift.String
  @objc public static let QG_LAST_CLICKED_NOTIFICATION_TIME: Swift.String
  @objc public static var QG_NOTIFICATION_ID: Swift.String {
    @objc get
  }
  @objc public static var QG_NOTIFICATION_CLICKED: Swift.String {
    @objc get
  }
  @objc public static let QG_CAMPAIGN_ID: Swift.String
  @objc public static let QG_KEY: Swift.String
  @objc public static let QG_NOTIF_ID: Swift.String
  @objc public static let QG_GCM_ID: Swift.String
  @objc public static let QG_NOTIFICATION_SOURCE: Swift.String
  @objc public static let QG_CLICK_ATTRIBUTION_WINDOW: Swift.String
  @objc public static let QG_CLICK_ATTRIBUTION_WINDOW_DEFAULT_VALUE: Swift.Int
  @objc public static let QG_VIEW_THROUGH_ATTRIBUTION_WINDOW: Swift.String
  @objc public static let QG_VIEW_THROUGH_ATTRIBUTION_WINDOW_DEFAULT_VALUE: Swift.Int
  @objc public static let QG_APP_ID: Swift.String
  @objc public static let QG_APP_SECRET: Swift.String
  @objc public static let AIQ_CROSS_PLATFORM_FRAMEWORK_SDK_TYPE: Swift.String
  @objc public static let AIQ_CROSS_PLATFORM_FRAMEWORK_SDK_VERSION: Swift.String
  @objc public static let AIQ_APPIER_ID: Swift.String
  @objc public static let AIQ_APPIER_ID_CREATE_TIME: Swift.String
  @objc public static let AIQ_NEW_USER_DURATION: Swift.Double
  @objc public static let QG_DEVICE_TOKEN: Swift.String
  @objc public static let QG_UNKNOWN_VALUE: Swift.String
  @objc public static let QG_LAST_LOCATION: Swift.String
  @objc public static let QG_APP_LAUNCH: Swift.String
  @objc public static let QG_FIRST_APP_LAUNCH: Swift.String
  @objc public static let QG_RECOMMENDATION_IMPRESSION: Swift.String
  @objc public static let QG_RECOMMENDATION_CLICKED: Swift.String
  @objc public static let QG_APP_LAUNCH_DELAY: Swift.Double
  @objc public static let QG_IN_APP: Swift.String
  @objc public static let QG_IN_APP_FIRST_APP_LAUNCHED_MATCHED: Swift.String
  @objc public static let QG_LAST_VIEW_THROUGH_NOTIFICATION_ID: Swift.String
  @objc public static let QG_LAST_VIEW_THROUGH_TIME: Swift.String
  @objc public static let QG_IN_APP_DISABLED_STATUS: Swift.String
  @objc public static let QG_PROFILE_INFO_LAST_SENT_TIME: Swift.String
  @objc public static let QG_USER_DETAILS_LAST_SENT_TIME: Swift.String
  @objc public static let QG_DEV_PROFILE: Swift.String
  @objc public static let QG_AIQ_PUSH_ENABLED_STATUS: Swift.String
  @objc public static let QG_INBOX: Swift.String
  @objc public static let QG_INBOX_LIMIT: Swift.String
  @objc public static let QG_CAROUSEL_ACTION_CATEGORY: Swift.String
  @objc public static let QG_CAROUSEL_ACTION_OPEN_APP: Swift.String
  @objc public static let QG_CAROUSEL_ACTION_NEXT: Swift.String
  @objc public static let QG_SEND_IDFA_WITH_CONSENT: Swift.String
  @objc public static let QG_ADS_TRACKING_STATUS: Swift.String
  @objc public static let QG_OPTOUT_STATUS: Swift.String
  @objc public static let QG_CRASH_LOG_KEY: Swift.String
  @objc public static let QG_SAVED_PUSH_NOTIFICATION: Swift.String
  @objc public static let QG_SAVED_PUSH_NOTIFICATION_LIMIT: Swift.String
  @objc public static let QG_SAVE_PUSH_NOTIFICATION_ENABLED: Swift.String
  @objc public static let AIQ_GEOFENCING_CAPABLE: Swift.String
  @objc public static let AIQP_CONFIG: Swift.String
  @objc public static let AIQP_DISABLED_STATUS: Swift.String
  @objc public static let QG_SAFARI_TRACKING_DISABLED_STATUS: Swift.String
  @objc public static let QG_SAFARI_DATA_SENT_STATUS: Swift.String
  @objc public static let QG_APP_GROUP_NAME_SDK: Swift.String
  @objc public static let QG_FORCE_TOUCH_CAPABILITY_STATUS: Swift.String
  @objc public static let QG_RICH_PUSH_SUPPORTED_STATUS: Swift.String
  @objc public static let QG_EXT_RICH_PUSH_DEEPLINK: Swift.String
  @objc public static let QG_IS_NOT_FIRST_APP_BACKGROUND: Swift.String
  @objc public static let QG_EXIT_PUSH_PAYLOAD: Swift.String
  @objc public static let EVENT_CONTROL_GROUP_RECEIVED: Swift.String
  @objc public static let EVENT_INAPP_DISPLAYED: Swift.String
  @objc public static let EVENT_INAPP_TOGGLED: Swift.String
  @objc public static let AIQ_REMOTE_CONFIG_URL: Swift.String
  @objc public static let ENVIRONMENT: Swift.String
  @objc public static let QG_UNIVERSAL_LINK_DOMAINS: Swift.String
  @objc public static let APPIER_APP_DELEGATE_PROXY_ENABLED_INFO_PLIST_KEY: Swift.String
  @objc public static let QG_FAILED_PUSH_EVENT_STACK: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AIQConfiguration) @objcMembers public class AIQUAConfiguration : ObjectiveC.NSObject {
  @objc public static let shared: Appier.AIQUAConfiguration
  @objc final public let storage: Appier.AIQUALocalStorage
  @objc public var remoteConfigEndpoint: Swift.String
  @objc public var endpoint: Appier.EndpointConfiguration {
    @objc get
    @objc set
  }
  @objc public var appIdentifier: Swift.String? {
    @objc get
  }
  @objc public var userIdentifier: Swift.Int {
    @objc get
  }
  @objc public var isNewUser: Swift.Bool {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc public init(storage: Appier.AIQUALocalStorage)
  @objc deinit
}
@objc(AIQDataPointsResponse) @objcMembers public class DataPointsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var success: Swift.Bool
  @objc public var error: Swift.String?
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.DataPointsResponse
  @objc public func data() throws -> Foundation.Data
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EndpointConfiguration : ObjectiveC.NSObject {
  @objc public var userServer: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var dback: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var recommendation: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var personalization: Swift.String? {
    @objc get
    @objc set
  }
  @objc public func clear()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(AIQEventLogger) public protocol EventLogger {
  @objc func logError(missingEndpoint: Swift.String, api: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRemoteConfig) public class RemoteConfig : ObjectiveC.NSObject, Swift.Codable {
  @objc public var endpoints: Appier.RemoteConfigEndpoints?
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.RemoteConfig
  @objc public func data() throws -> Foundation.Data
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRemoteConfigEndpoints) public class RemoteConfigEndpoints : ObjectiveC.NSObject, Swift.Codable {
  @objc public var dback: Swift.String?
  @objc public var user: Swift.String?
  @objc public var personalization: Swift.String?
  @objc public var recommendation: Swift.String?
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.RemoteConfigEndpoints
  @objc public func data() throws -> Foundation.Data
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(AIQCoreDataComponent) @objcMembers public class CoreDataComponent : ObjectiveC.NSObject {
  @objc public var managedObjectContext: CoreData.NSManagedObjectContext {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(AIQLoggedEvent) @objcMembers public class LoggedEvent : ObjectiveC.NSObject {
  @objc convenience public init(name: Swift.String, parameters: Swift.String? = nil)
  @objc convenience public init(name: Swift.String, timestamp: Swift.Int, parameters: Swift.String? = nil)
  @objc convenience public init(name: Swift.String, dictionaryParameters parameters: [Swift.String : Any]?)
  @objc deinit
}
public let maxRowCount: Swift.Int
@objc(AIQLoggedEventDAO) @objcMembers public class LoggedEventDAO : ObjectiveC.NSObject {
  @objc(initWithManagedObjectContext:) public init(context: CoreData.NSManagedObjectContext)
  @objc public func getAll(withLimit: Swift.Int = maxRowCount) -> [Appier.LoggedEvent]
  @objc(getLoggedEventEarlierBeforeWithTime:) public func getLoggedEventEarlierBeforeWithTime(beforeFromNow: Swift.Int) -> [Appier.LoggedEvent]
  @objc @discardableResult
  public func deleteOverflowed() -> Swift.Int
  @objc @discardableResult
  public func deleteOutdated() -> Swift.Int
  @objc @discardableResult
  public func deleteAll() -> Swift.Int
  @objc @discardableResult
  public func create(loggedEvent: Appier.LoggedEvent) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AIQObject : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Appier.Logger {
  @objc(aiquaLogger) public static let aiqua: Appier.Logger
}
@propertyWrapper public struct Default<Provider> : Swift.Codable where Provider : Appier.DefaultValueProvider {
  public var wrappedValue: Provider.Value
  public init()
  public init(wrappedValue: Provider.Value)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Appier.Default : Swift.Equatable {
  public static func == (a: Appier.Default<Provider>, b: Appier.Default<Provider>) -> Swift.Bool
}
extension Appier.Default : Swift.Hashable where Provider.Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.KeyedDecodingContainer {
  public func decode<P>(_: Appier.Default<P>.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> Appier.Default<P> where P : Appier.DefaultValueProvider
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<P>(_ value: Appier.Default<P>, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws where P : Appier.DefaultValueProvider
}
public protocol DefaultValueProvider {
  associatedtype Value : Swift.Decodable, Swift.Encodable, Swift.Equatable
  static var `default`: Self.Value { get }
}
public enum False : Appier.DefaultValueProvider {
  public static let `default`: Swift.Bool
  public typealias Value = Swift.Bool
}
public enum True : Appier.DefaultValueProvider {
  public static let `default`: Swift.Bool
  public typealias Value = Swift.Bool
}
public enum Empty<A> : Appier.DefaultValueProvider where A : Swift.Decodable, A : Swift.Encodable, A : Swift.Equatable, A : Swift.RangeReplaceableCollection {
  public static var `default`: A {
    get
  }
  public typealias Value = A
}
public enum EmptyDictionary<K, V> : Appier.DefaultValueProvider where K : Swift.Decodable, K : Swift.Encodable, K : Swift.Hashable, V : Swift.Decodable, V : Swift.Encodable, V : Swift.Equatable {
  public static var `default`: [K : V] {
    get
  }
  public typealias Value = [K : V]
}
public enum Zero : Appier.DefaultValueProvider {
  public static let `default`: Swift.Int
  public typealias Value = Swift.Int
}
public enum ZeroDouble : Appier.DefaultValueProvider {
  public static let `default`: Swift.Double
  public typealias Value = Swift.Double
}
extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor(unsafe) public static func isAbleToSwizzleMethods() -> Swift.Bool
}
@objc extension UIKit.UIColor {
  @objc public static func qgColor(_ r: CoreFoundation.CGFloat, _ g: CoreFoundation.CGFloat, _ b: CoreFoundation.CGFloat, _ a: CoreFoundation.CGFloat) -> UIKit.UIColor
  @objc public static var qgBackgroundOverlay: UIKit.UIColor {
    @objc get
  }
  @objc public static var qgMessage: UIKit.UIColor {
    @objc get
  }
  @objc public static var qgClear: UIKit.UIColor {
    @objc get
  }
  @objc public static var qgAdaptiveWhite: UIKit.UIColor {
    @objc get
  }
  @objc public static var qgAdaptiveBlack: UIKit.UIColor {
    @objc get
  }
}
@objc extension UIKit.UIFont {
  @objc public static func qgHelveticaNeue(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public static func qgHelveticaNeueBold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public static func qgHelveticaNeueLight(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public static func qgHelveticaNeueMedium(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public static var qgInAppMessage: UIKit.UIFont {
    @objc get
  }
}
extension Foundation.URLSessionConfiguration {
  @objc public static var aiqDefault: Foundation.URLSessionConfiguration {
    @objc get
  }
}
@objc @objcMembers public class AIQGeofenceData : Appier.AIQObject, Swift.Codable {
  @objc final public let geofencing: Appier.AIQGeofencing
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class AIQGeofencing : Appier.AIQObject, Swift.Codable {
  @objc final public let geofences: [Appier.AIQGeofence]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AIQGeofence : Appier.AIQObject, Swift.Codable {
  @objc final public let id: Swift.Int
  @objc final public let name: Swift.String
  @nonobjc final public let latitude: Swift.Double
  @nonobjc final public let longitude: Swift.Double
  @nonobjc final public let radius: Swift.Double
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol AIQGeofenceManagerDelegate {
  @objc func logGeofence(event: Swift.String, parameters: [Swift.AnyHashable : Any])
  @objc func setUserProfile(geofencingCapable: Swift.Bool)
  @objc func fetchGeofence()
}
@objc @objcMembers public class AIQGeofenceManager : ObjectiveC.NSObject {
  @objc public static let shared: Appier.AIQGeofenceManager
  @objc weak public var delegate: (any Appier.AIQGeofenceManagerDelegate)?
  @objc public init(storage: Appier.AIQUALocalStorage)
  @objc public func getGeofenceDetails(completion: @escaping ([Swift.AnyHashable : Any]) -> Swift.Void)
  @objc public func shouldFetchGeofence(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func update(geofencing: [Swift.String : Any])
  @objc deinit
}
extension Appier.AIQGeofenceManager : Appier.AIQGeofenceMonitoringDelegate {
  @objc dynamic public func didStartMonitoring(regionIdentifier: Swift.String)
  @objc dynamic public func monitoringDidFail(regionIdentifier: Swift.String?, error: any Swift.Error)
  @objc dynamic public func didEnterRegion(identifier: Swift.String, location: CoreLocation.CLLocation)
  @objc dynamic public func didExitRegion(identifier: Swift.String, location: CoreLocation.CLLocation)
  @objc dynamic public func locationAuthorizationDidChange()
}
@objc(AIQInAppAdditionalCondition) @objcMembers public class InAppAdditionalCondition : ObjectiveC.NSObject, Swift.Codable {
  @objc public var timeRange: Appier.InAppAdditionalTimeRange
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.InAppAdditionalCondition
  @objc public func data() throws -> Foundation.Data
  @objc(matchWithLoggedEvents:) public func match(loggedEvents: [Appier.LoggedEvent]) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(AIQInAppAdditionalimeRange) @objcMembers public class InAppAdditionalTimeRange : ObjectiveC.NSObject, Swift.Codable {
  @objc public var durationInMilliSec: Swift.Int {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum InAppAdditionalTimeUnit : Swift.String, Swift.Codable {
  case Hour
  case Minute
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct InAppAdditionalCriteria : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InAppAdditionalCriteriaOperator : Swift.String, Swift.Codable {
  case And
  case Or
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct InAppAdditionalEventCriteria : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InAppAdditionalEventOperator : Swift.String, Swift.Codable {
  case Equal
  case NotEqual
  case GreaterThan
  case LessThan
  case GreaterThanOrEqual
  case LessThanOrEqual
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(AIQInAppBadgeSetting) @objcMembers public class InAppBadgeSetting : ObjectiveC.NSObject, Swift.Codable {
  @objc public var align: Appier.InAppBadgeAlignment
  @objc public var asDeepLink: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.InAppBadgeSetting
  @objc public func data() throws -> Foundation.Data
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(AIQInAppBadgeAlignment) public enum InAppBadgeAlignment : Swift.Int, Swift.Codable {
  case TopLeft, TopRight
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(AIQInAppMatchCondition) @objcMembers public class InAppMatchCondition : ObjectiveC.NSObject, Swift.Codable {
  @objc(decodeWithData:error:) public class func decode(from data: Foundation.Data) throws -> Appier.InAppMatchCondition
  @objc public func data() throws -> Foundation.Data
  @objc public func match(parameters: [Swift.String : Any]) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum InAppMatchOperator : Swift.String, Swift.Codable {
  case Equals
  case Equal
  case NotEqual
  case Contained
  case GreaterThan
  case GreaterThanOrEqual
  case LessThan
  case LessThanOrEqual
  case HasValue
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InAppStringOrDouble : Swift.Codable {
  case string(Swift.String)
  case double(Swift.Double)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(AIQInAppRemoteService) @objcMembers final public class InAppRemoteService : ObjectiveC.NSObject {
  @objc(initWithConfiguration:) convenience public init(configuration: Appier.AIQUAConfiguration)
  @objc deinit
}
extension Appier.InAppRemoteService : Appier.InAppService {
  @objc final public func fetchInAppCampaigns(shouldFetchInapp: Swift.Bool, shouldFetchGeofence: Swift.Bool, completionHandler: @escaping (Appier.InAppRemoteService.PopupCampaigns?, Appier.InAppRemoteService.InboxCampaigns?, Appier.InAppRemoteService.Geofencing?, (any Swift.Error)?) -> Swift.Void)
}
@objc(AIQInAppService) public protocol InAppService {
  typealias PopupCampaigns = [[Swift.String : Any]]
  typealias InboxCampaigns = [[Swift.String : Any]]
  typealias Geofencing = [Swift.String : Any]
  @objc(fetchInAppCampaignsWithShouldFetchInapp:shouldFetchGeofence:completionHandler:) func fetchInAppCampaigns(shouldFetchInapp: Swift.Bool, shouldFetchGeofence: Swift.Bool, completionHandler: @escaping (Self.PopupCampaigns?, Self.InboxCampaigns?, Self.Geofencing?, (any Swift.Error)?) -> Swift.Void)
}
@objc(QGDATATYPE) public enum DataType : Swift.Int {
  @objc(QGDATATYPE_PROFILE) case profile = 0
  @objc(QGDATATYPE_EVENTS) case events = 1
  @objc(QGDATATYPE_USERDETAILS) case userDetails = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AIQUtility : ObjectiveC.NSObject {
  @objc public class func encode(obj: Any?) -> Foundation.Data?
  @objc public class func decode(data: Foundation.Data?) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol QGWKScriptMessageHandler {
  @objc func userContentController(_ userContentController: WebKit.WKUserContentController, didReceiveScriptMessage message: WebKit.WKScriptMessage)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class QGWKWebView : WebKit.WKWebView {
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any Appier.QGWKScriptMessageHandler)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @objc @_Concurrency.MainActor(unsafe) public func injectUserScript(_ userScript: WebKit.WKUserScript?)
  @objc @_Concurrency.MainActor(unsafe) public func addScriptMessageHandler(_ name: Swift.String?)
  @objc deinit
}
extension Appier.QGWKWebView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@_hasMissingDesignatedInitializers @objc(AIQDataCollectionRemoteService) @objcMembers final public class DataCollectionRemoteService : ObjectiveC.NSObject {
  @objc(initWithConfiguration:) convenience public init(configuration: Appier.AIQUAConfiguration)
  @objc deinit
}
extension Appier.DataCollectionRemoteService : Appier.DataCollectionService {
  @objc final public func upload(_ dataPoints: Foundation.NSData, completionHandler: @escaping (Appier.DataPointsResponse?, Swift.Double, (any Swift.Error)?) -> Swift.Void)
}
@objc(AIQDataCollectionService) public protocol DataCollectionService {
  @objc(uploadDataPoints:completionHandler:) func upload(_ dataPoints: Foundation.NSData, completionHandler: @escaping (Appier.DataPointsResponse?, Swift.Double, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(AIQPersonalizationRemoteService) @objcMembers final public class PersonalizationRemoteService : ObjectiveC.NSObject {
  @objc(initWithConfiguration:session:) convenience public init(configuration: Appier.AIQUAConfiguration, session: Foundation.URLSession)
  @objc deinit
}
extension Appier.PersonalizationRemoteService : Appier.PersonalizationService {
  @objc final public func reportDebugConfigContext(_ context: [Swift.String : Any])
  @objc final public func requestPersonalizationConfig(_ completionHandler: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
}
@objc(AIQPersonalizationService) public protocol PersonalizationService {
  @objc(reportDebugConfigContext:) func reportDebugConfigContext(_ context: [Swift.String : Any])
  @objc(requestPersonalizationConfig:) func requestPersonalizationConfig(_ completionHandler: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(AIQRecommendationRemoteService) @objcMembers final public class RecommendationRemoteService : ObjectiveC.NSObject {
  @objc final public var observingRequest: Foundation.URLRequest?
  @objc(initWithConfiguration:session:) convenience public init(configuration: Appier.AIQUAConfiguration, session: Foundation.URLSession)
  @objc deinit
}
extension Appier.RecommendationRemoteService : Appier.RecommendationService {
  @objc final public func getRecommendation(scenarioId: Swift.String, queryStringDict: [Swift.String : Any]?, completionHandler: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getTags(request requestObj: Appier.RecommendationRequest, completionHandler: @escaping (Appier.RecommendationTagResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getProducts(request requestObj: Appier.RecommendationRequest, completionHandler: @escaping (Appier.RecommendationProductResponse?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationRequest) public class RecommendationRequest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc(AIQRecommendationService) public protocol RecommendationService {
  @objc var observingRequest: Foundation.URLRequest? { get set }
  @objc(getRecommendationWithScenarioId:withQueryParameters:withCompletionHandler:) func getRecommendation(scenarioId: Swift.String, queryStringDict: [Swift.String : Any]?, completionHandler: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @objc(getTagsWithRequest:withCompletionHandler:) func getTags(request: Appier.RecommendationRequest, completionHandler: @escaping (Appier.RecommendationTagResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc(getProductsWithRequest:withCompletionHandler:) func getProducts(request: Appier.RecommendationRequest, completionHandler: @escaping (Appier.RecommendationProductResponse?, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIQRecommendationPopularTagsRequest) public class RecommendationPopularTagsRequest : Appier.RecommendationRequest {
  @objc final public let scenarioId: Swift.String
  @nonobjc final public let numOfReturn: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var numberOfReturn: Foundation.NSNumber {
    @objc get
  }
  @_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationPopularTagsRequestBuilder) public class Builder : ObjectiveC.NSObject {
    @objc @discardableResult
    public func setScenarioId(_ scenarioId: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setNumOfReturn(_ numOfReturn: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setNumberOfReturn(_ numOfReturn: Foundation.NSNumber) -> Self
    @objc public func build(error: Foundation.NSErrorPointer) -> Appier.RecommendationPopularTagsRequest?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIQRecommendationProductToTagsRequest) public class RecommendationProductToTagsRequest : Appier.RecommendationRequest {
  @objc final public let productId: Swift.String
  @objc final public let scenarioId: Swift.String
  @nonobjc final public let numOfReturn: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var numberOfReturn: Foundation.NSNumber {
    @objc get
  }
  @_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationProductToTagsRequestBuilder) public class Builder : ObjectiveC.NSObject {
    @objc @discardableResult
    public func setProductId(_ productId: Swift.String) -> Self
    @objc @discardableResult
    public func setScenarioId(_ scenarioId: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setNumOfReturn(_ numOfReturn: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setNumberOfReturn(_ numOfReturn: Foundation.NSNumber) -> Self
    @objc public func build(error: Foundation.NSErrorPointer) -> Appier.RecommendationProductToTagsRequest?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIQRecommendationTagToProductsRequest) public class RecommendationTagToProductsRequest : Appier.RecommendationRequest {
  @objc final public let scenarioId: Swift.String
  @nonobjc final public let numOfReturn: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var numberOfReturn: Foundation.NSNumber {
    @objc get
  }
  @nonobjc final public let pageNum: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var pageNumber: Foundation.NSNumber {
    @objc get
  }
  @objc public var tags: Swift.String
  @nonobjc final public let seed: Swift.Double
  @objc @available(swift, obsoleted: 1.0)
  public var seedNum: Foundation.NSNumber {
    @objc get
  }
  @_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationTagToProductsRequestBuilder) public class Builder : ObjectiveC.NSObject {
    @objc @discardableResult
    public func setScenarioId(_ scenarioId: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setNumOfReturn(_ numOfReturn: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setNumberOfReturn(_ numOfReturn: Foundation.NSNumber) -> Self
    @discardableResult
    @nonobjc public func setPageNum(_ pageNum: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setPageNumber(_ pageNum: Foundation.NSNumber) -> Self
    @objc @discardableResult
    public func setTags(_ tags: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setSeed(_ seed: Swift.Double) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setSeedNumber(_ seed: Foundation.NSNumber) -> Self
    @objc @discardableResult
    public func nextPage() -> Self
    @objc public func build(error: Foundation.NSErrorPointer) -> Appier.RecommendationTagToProductsRequest?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIQRecommendationTagToTagsRequest) public class RecommendationTagToTagsRequest : Appier.RecommendationRequest {
  @objc final public let tagName: Swift.String
  @objc final public let scenarioId: Swift.String
  @nonobjc final public let numOfReturn: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var numberOfReturn: Foundation.NSNumber {
    @objc get
  }
  @_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationTagToTagsRequestBuilder) public class Builder : ObjectiveC.NSObject {
    @objc @discardableResult
    public func setTagName(_ tagName: Swift.String) -> Self
    @objc @discardableResult
    public func setScenarioId(_ scenarioId: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setNumOfReturn(_ numOfReturn: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setNumberOfReturn(_ numOfReturn: Foundation.NSNumber) -> Self
    @objc public func build(error: Foundation.NSErrorPointer) -> Appier.RecommendationTagToTagsRequest?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIQRecommendationUserToTagsRequest) public class RecommendationUserToTagsRequest : Appier.RecommendationRequest {
  @objc final public let userId: Swift.String
  @objc final public let scenarioId: Swift.String
  @nonobjc final public let numOfReturn: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public var numberOfReturn: Foundation.NSNumber {
    @objc get
  }
  @_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationUserToTagsRequestBuilder) public class Builder : ObjectiveC.NSObject {
    @objc @discardableResult
    public func setUserId(_ userId: Swift.String) -> Self
    @objc @discardableResult
    public func setScenarioId(_ scenarioId: Swift.String) -> Self
    @discardableResult
    @nonobjc public func setNumOfReturn(_ numOfReturn: Swift.Int) -> Self
    @objc @discardableResult
    @available(swift, obsoleted: 1.0)
    public func setNumberOfReturn(_ numOfReturn: Foundation.NSNumber) -> Self
    @objc public func build(error: Foundation.NSErrorPointer) -> Appier.RecommendationUserToTagsRequest?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationProductItem) public class RecommendationProductItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var productId: Swift.String?
  @nonobjc public var position: Swift.Int?
  @objc @available(swift, obsoleted: 1.0)
  public var positionNumber: Foundation.NSNumber? {
    @objc get
  }
  @objc public var image: Swift.String?
  @objc public var title: Swift.String?
  @objc public var descriptionText: Swift.String?
  @objc public var url: Swift.String?
  @objc public var category: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var price: Swift.String?
  @objc public var originalPrice: Swift.String?
  @objc(ID) public var id: Swift.String?
  @objc public var availability: Swift.String?
  @nonobjc public var score: Swift.Double?
  @objc @available(swift, obsoleted: 1.0)
  public var scoreNumber: Foundation.NSNumber? {
    @objc get
  }
  @objc public var imageLink: Swift.String?
  @objc public var link: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationProductResponse) public class RecommendationProductResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var errorMessage: Swift.String?
  @objc public var scenarioId: Swift.String?
  @objc public var modelId: Swift.String?
  @objc public var recId: Swift.String?
  @objc public var expType: Swift.String?
  @objc @Appier.Default<Appier.Empty> public var items: [Appier.RecommendationProductItem] {
    @objc get
    @objc set
    _modify
  }
  @objc public var hasNextPage: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationTagItem) public class RecommendationTagItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var tagName: Swift.String?
  @objc(ID) public var id: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(AIQRecommendationTagResponse) public class RecommendationTagResponse : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var errorMessage: Swift.String?
  @objc public var scenarioId: Swift.String?
  @objc public var modelId: Swift.String?
  @objc public var recId: Swift.String?
  @objc public var expType: Swift.String?
  @objc @Appier.Default<Appier.Empty> public var items: [Appier.RecommendationTagItem] {
    @objc get
    @objc set
    _modify
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(AIQRemoteConfigRemoteService) @objcMembers final public class RemoteConfigRemoteService : ObjectiveC.NSObject {
  @objc(initWithConfiguration:) convenience public init(configuration: Appier.AIQUAConfiguration)
  @objc deinit
}
extension Appier.RemoteConfigRemoteService : Appier.RemoteConfigService {
  @objc final public func fetchRemoteConfig(_ completionHandler: @escaping (Appier.RemoteConfig?, (any Swift.Error)?) -> Swift.Void)
}
@objc(AIQRemoteConfigService) public protocol RemoteConfigService {
  @objc(fetchRemoteConfigWithCompletionHandler:) func fetchRemoteConfig(_ completionHandler: @escaping (Appier.RemoteConfig?, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers public class LINEUrlHandler {
  @objc deinit
}
extension Appier.LINEUrlHandler : Appier.ThirdPartyUrlHandlerProtocol {
  @objc public static func isEnable() -> Swift.Bool
  @objc public static func handleUrl(_ url: Foundation.URL, eventLogger: Appier.QGSdk = QGSdk.getSharedInstance())
  @objc public static func handleUserActivity(_ userActivity: Foundation.NSUserActivity, eventLogger: Appier.QGSdk = QGSdk.getSharedInstance())
  @objc public static func modifyUrlIfNeeded(_ url: Foundation.URL) -> Foundation.URL?
}
public protocol ThirdPartyUrlHandlerProtocol {
  static func isEnable() -> Swift.Bool
  static func handleUrl(_ url: Foundation.URL, eventLogger: Appier.QGSdk)
  static func handleUserActivity(_ userActivity: Foundation.NSUserActivity, eventLogger: Appier.QGSdk)
  static func modifyUrlIfNeeded(_ url: Foundation.URL) -> Foundation.URL?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ThirdPartyUrlHandlerService : ObjectiveC.NSObject {
  @objc public static func handleUrl(_ url: Foundation.URL)
  @objc public static func handleUserActivity(_ userActivity: Foundation.NSUserActivity)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(QGSessionDelegate) public class SessionDelegate : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  @objc public static let shared: Appier.SessionDelegate
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(APRApp) @objcMembers public class AppierApp : ObjectiveC.NSObject {
  @objc public var aiDeal: Appier.AiDeal {
    @objc get
  }
  @objc public var aiqua: Appier.QGSdk {
    @objc get
  }
  @objc override dynamic public init()
  @objc(setDataCollection:) public func setDataCollection(_ enabled: Swift.Bool)
  @objc public func showConsole()
  @objc(sharedApp) public static let shared: Appier.AppierApp
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(APRDeviceInfo) @objcMembers public class DeviceInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Appier.DeviceInfo {
  @objc public static func optOutSet() -> Foundation.NSNumber
  @objc public static func IDFA() -> Swift.String
  @objc public static func IDFV() -> Swift.String
  @objc public static func systemVersion() -> Swift.String
  @objc public static func deviceModel() -> Swift.String
  @objc public static func modelName() -> Swift.String
  @objc public static func deviceName() -> Swift.String
  @objc public static func language() -> Swift.String
  @objc public static func timeZone() -> Swift.String
  @objc public static func appVersion() -> Swift.String
  @objc public static func appBuildNumber() -> Swift.String
  @objc public static func appBundleIdentifier() -> Swift.String
  @objc public static func diskSpace() -> [Swift.AnyHashable : Any]?
  @objc public static func coreTelephonyNetwork() -> Swift.String
  @objc public static func networkType() -> Swift.String
  @objc public static func simCardInfo() -> [Swift.AnyHashable : Any]
  @objc public static func richPushSupported() -> Swift.Bool
  @objc public static func systemVersionEqualTo(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionGreaterThan(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionGreaterThanOrEqualTo(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionLessThan(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionLessThanOrEqualTo(_ version: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(APRFrameworkInfo) @objcMembers final public class FrameworkInfo : ObjectiveC.NSObject {
  @objc public static var buildString: Swift.String {
    @objc get
  }
  @objc public static var versionString: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(APRLogger) public class Logger : ObjectiveC.NSObject {
  @objc final public let category: Swift.String
  @objc public var enabled: Swift.Bool {
    @objc get
  }
  @objc(descriptionForLevel:) public static func description(for level: Appier.LogType) -> Swift.String
  @objc deinit
}
@objc(APRLogType) public enum LogType : Swift.Int {
  case debug, info, warning, error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Appier.LogType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc extension Foundation.NSString {
  @objc dynamic public func isValidStr() -> Swift.Bool
  @objc dynamic public func encodedURL() -> Foundation.URL?
  @objc dynamic public func getAppSecret() -> Foundation.NSString
  @objc dynamic public func isStringContainsNewLineCharacter() -> Swift.Bool
  @objc dynamic public var SHA256string: Foundation.NSString {
    @objc get
  }
}
extension Swift.String {
  public func isValidStr() -> Swift.Bool
  public func encodedURL() -> Foundation.URL?
  public func getAppSecret() -> Swift.String
  public func isStringContainsNewLineCharacter() -> Swift.Bool
}
public protocol URLSessionProtocol {
  func dataTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  func dataTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  func downloadTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.URL?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDownloadTask
}
extension Foundation.URLSession : Appier.URLSessionProtocol {
}
@_inheritsConvenienceInitializers @objc(LoggedEventEntity) public class LoggedEventEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Appier.LoggedEventEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Appier.LoggedEventEntity>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parameters: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension Appier.InAppAdditionalTimeUnit : Swift.Equatable {}
extension Appier.InAppAdditionalTimeUnit : Swift.Hashable {}
extension Appier.InAppAdditionalTimeUnit : Swift.RawRepresentable {}
extension Appier.InAppAdditionalCriteriaOperator : Swift.Equatable {}
extension Appier.InAppAdditionalCriteriaOperator : Swift.Hashable {}
extension Appier.InAppAdditionalCriteriaOperator : Swift.RawRepresentable {}
extension Appier.InAppAdditionalEventOperator : Swift.Equatable {}
extension Appier.InAppAdditionalEventOperator : Swift.Hashable {}
extension Appier.InAppAdditionalEventOperator : Swift.RawRepresentable {}
extension Appier.InAppBadgeAlignment : Swift.Equatable {}
extension Appier.InAppBadgeAlignment : Swift.Hashable {}
extension Appier.InAppBadgeAlignment : Swift.RawRepresentable {}
extension Appier.InAppMatchOperator : Swift.Equatable {}
extension Appier.InAppMatchOperator : Swift.Hashable {}
extension Appier.InAppMatchOperator : Swift.RawRepresentable {}
extension Appier.DataType : Swift.Equatable {}
extension Appier.DataType : Swift.Hashable {}
extension Appier.DataType : Swift.RawRepresentable {}
extension Appier.LogType : Swift.Equatable {}
extension Appier.LogType : Swift.Hashable {}
extension Appier.LogType : Swift.RawRepresentable {}
