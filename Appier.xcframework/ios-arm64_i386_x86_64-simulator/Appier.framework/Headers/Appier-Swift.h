#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef APPIER_SWIFT_H
#define APPIER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Appier/Appier.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Appier",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_PROTOCOL_NAMED("AIQUAConfiguration")
@protocol AIQConfiguration
@property (nonatomic, copy) NSString * _Nullable userServerEndpoint;
@property (nonatomic, copy) NSString * _Nullable remoteConfigEndpoint;
@property (nonatomic, copy) NSString * _Nullable dbackEndpoint;
@property (nonatomic, copy) NSString * _Nullable recommendationEndpoint;
@property (nonatomic, copy) NSString * _Nullable personalizationEndpoint;
@property (nonatomic, readonly, copy) NSString * _Nullable appIdentifier;
@property (nonatomic, readonly) NSInteger userIdentifier;
@property (nonatomic, readonly) BOOL isNewUser;
@end


/// An object that represents an action to report to the framework.
SWIFT_CLASS_NAMED("Action")
@interface AIDAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIDAction (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didRedeemCoupon;)
+ (AIDAction * _Nonnull)didRedeemCoupon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didAddToCart;)
+ (AIDAction * _Nonnull)didAddToCart SWIFT_WARN_UNUSED_RESULT;
@end

@class AIDConfiguration;
@class UIViewController;
@class UIScrollView;
@class WKWebView;
@class AIDConversion;
@class NSURL;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS_NAMED("AiDeal")
@interface AIDAiDeal : NSObject
@property (nonatomic, strong) AIDConfiguration * _Nonnull configuration;
/// Configures the API key used to connect to AiDeal servers.
/// This method must be called BEFORE logging view controllers and conversions.
- (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView;
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController webView:(WKWebView * _Nonnull)webView;
/// Stops logging the current page.
/// This method must be called in <code>viewDidDisappear</code>.
- (void)stopLogging;
/// Logs conversion data, and send it to AiDeal servers.
- (void)logConversion:(AIDConversion * _Nonnull)conversion;
- (void)logAction:(AIDAction * _Nonnull)action;
- (void)setDataCollection:(BOOL)enabled;
/// Opens a campaign preview URL.
/// The URL can be either a universal link or a custom URL scheme, and accepts the following query string parameters:
/// <ul>
///   <li>
///     <code>zc_element_id</code>: the campaignâ€™s element identifier
///   </li>
///   <li>
///     <code>zc_coupon_code</code>: the coupon code (optional)
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// <ul>
///   <li>
///     <code>https://yoursite.com/foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
///   <li>
///     <code>yourapp:foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
/// </ul>
- (void)openURL:(NSURL * _Nonnull)url;
/// Notifies that the size of the current view is about to change.
/// Calling this method in <code>UIViewController.viewWillTransition(to:with:)</code> is necessary for applications allowing
/// landscape orientation, otherwise badges will not be correctly positioned after a rotation occurs.
- (void)viewWillTransitionWithTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAiDeal * _Nonnull shared;)
+ (AIDAiDeal * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull offerButtonTappedNotification;)
+ (NSNotificationName _Nonnull)offerButtonTappedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull configurationDidChangeNotification;)
+ (NSNotificationName _Nonnull)configurationDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("AiDealConfiguration")
@interface AIDConfiguration : NSObject
- (void)setAllowsBadgeDisplay:(BOOL)flag;
- (void)setInsetsFromArea:(UIEdgeInsets)insets;
- (void)setBadgeDisplayAreaToInsideLayoutGuides;
- (void)setBadgeDisplayAreaToSafeArea SWIFT_AVAILABILITY(ios,introduced=11);
- (void)setBadgeDisplayAreaToScreen;
- (void)setBadgeDisplayArea:(CGRect)rect;
- (void)offsetBadgePositionByX:(CGFloat)x Y:(CGFloat)y;
- (void)setBadgePosition:(CGPoint)point;
- (void)resetBadgePosition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class QGSdk;

SWIFT_CLASS_NAMED("AppierApp")
@interface APRApp : NSObject
@property (nonatomic, readonly, strong) AIDAiDeal * _Nonnull aiDeal;
@property (nonatomic, readonly, strong) QGSdk * _Nonnull aiqua;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setDataCollection:(BOOL)enabled;
- (void)showConsole;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRApp * _Nonnull sharedApp;)
+ (APRApp * _Nonnull)sharedApp SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6Appier15AppierResources")
@interface AppierResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class AIDConversionItem;

SWIFT_CLASS_NAMED("Conversion")
@interface AIDConversion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic) NSInteger totalQuantity;
@property (nonatomic) double totalPrice;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull couponCodes;
@property (nonatomic, copy) NSArray<AIDConversionItem *> * _Nonnull items;
@property (nonatomic, readonly, copy) NSString * _Nonnull conversionId SWIFT_DEPRECATED_MSG("", "identifier");
@property (nonatomic, copy) NSString * _Nullable conversionName SWIFT_DEPRECATED_MSG("", "name");
@property (nonatomic) NSInteger totalItems SWIFT_DEPRECATED_MSG("", "numberOfItems");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ConversionItem")
@interface AIDConversionItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) double price;
@property (nonatomic) NSInteger quantity;
@property (nonatomic) NSInteger count SWIFT_DEPRECATED_MSG("", "quantity");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CoreDataComponent")
@interface AIQCoreDataComponent : NSObject
@property (nonatomic, strong) NSManagedObjectContext * _Nonnull managedObjectContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCollectionRemoteService")
@interface AIQDataCollectionRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@class AIQDataPointsResponse;

SWIFT_PROTOCOL_NAMED("DataCollectionService")
@protocol AIQDataCollectionService
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end


@interface AIQDataCollectionRemoteService (SWIFT_EXTENSION(Appier)) <AIQDataCollectionService>
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end



SWIFT_CLASS_NAMED("DataPointsResponse")
@interface AIQDataPointsResponse : NSObject
@property (nonatomic) BOOL success;
@property (nonatomic, copy) NSString * _Nullable error;
+ (AIQDataPointsResponse * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("EventLogger")
@protocol AIQEventLogger
- (void)logErrorWithMissingEndpoint:(NSString * _Nonnull)missingEndpoint api:(NSString * _Nonnull)api;
@end


SWIFT_CLASS_NAMED("FrameworkInfo")
@interface APRFrameworkInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buildString;)
+ (NSString * _Nonnull)buildString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AIQInAppAdditionalimeRange;
@class AIQLoggedEvent;

SWIFT_CLASS_NAMED("InAppAdditionalCondition")
@interface AIQInAppAdditionalCondition : NSObject
@property (nonatomic, strong) AIQInAppAdditionalimeRange * _Nonnull timeRange;
+ (AIQInAppAdditionalCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithLoggedEvents:(NSArray<AIQLoggedEvent *> * _Nonnull)loggedEvents SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("InAppAdditionalTimeRange")
@interface AIQInAppAdditionalimeRange : NSObject
@property (nonatomic, readonly) NSInteger durationInMilliSec;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AIQInAppBadgeAlignment, "InAppBadgeAlignment", open) {
  AIQInAppBadgeAlignmentTopLeft = 0,
  AIQInAppBadgeAlignmentTopRight = 1,
};


SWIFT_CLASS_NAMED("InAppBadgeSetting")
@interface AIQInAppBadgeSetting : NSObject
@property (nonatomic) enum AIQInAppBadgeAlignment align;
@property (nonatomic) BOOL asDeepLink;
+ (AIQInAppBadgeSetting * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppMatchCondition")
@interface AIQInAppMatchCondition : NSObject
+ (AIQInAppMatchCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppRemoteService")
@interface AIQInAppRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("InAppService")
@protocol AIQInAppService
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQInAppRemoteService (SWIFT_EXTENSION(Appier)) <AIQInAppService>
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, APRLogType, "LogType", open) {
  APRLogTypeDebug = 0,
  APRLogTypeInfo = 1,
  APRLogTypeWarning = 2,
  APRLogTypeError = 3,
};


SWIFT_CLASS_NAMED("LoggedEvent")
@interface AIQLoggedEvent : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name timestamp:(NSInteger)timestamp parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name dictionaryParameters:(NSDictionary<NSString *, id> * _Nullable)parameters;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LoggedEventDAO")
@interface AIQLoggedEventDAO : NSObject
- (nonnull instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getAllWithLimit:(NSInteger)withLimit SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getLoggedEventEarlierBeforeWithTime:(NSInteger)beforeFromNow SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)deleteOverflowed;
- (NSInteger)deleteOutdated;
- (NSInteger)deleteAll;
- (BOOL)createWithLoggedEvent:(AIQLoggedEvent * _Nonnull)loggedEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSEntityDescription;

SWIFT_CLASS_NAMED("LoggedEventEntity")
@interface LoggedEventEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LoggedEventEntity (SWIFT_EXTENSION(Appier))
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic) int64_t timestamp;
@end


/// An object that prints interpolated strings to the console, and a drop-in replacement for the
/// <code>os.Logger</code> type introduced in iOS 14.
SWIFT_CLASS_NAMED("Logger")
@interface APRLogger : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly) BOOL enabled;
+ (NSString * _Nonnull)descriptionForLevel:(enum APRLogType)level SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaNotificationLogger;)
+ (APRLogger * _Nonnull)aiquaNotificationLogger SWIFT_WARN_UNUSED_RESULT;
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaLogger;)
+ (APRLogger * _Nonnull)aiquaLogger SWIFT_WARN_UNUSED_RESULT;
@end









@class NSURLSession;

SWIFT_CLASS_NAMED("PersonalizationRemoteService")
@interface AIQPersonalizationRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("PersonalizationService")
@protocol AIQPersonalizationService
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQPersonalizationRemoteService (SWIFT_EXTENSION(Appier)) <AIQPersonalizationService>
/// Calling this method only in debug mode
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class NSURLRequest;

SWIFT_CLASS_NAMED("RecommendationRemoteService")
@interface AIQRecommendationRemoteService : NSObject
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("RecommendationService")
@protocol AIQRecommendationService
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRecommendationRemoteService (SWIFT_EXTENSION(Appier)) <AIQRecommendationService>
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class AIQRemoteConfigEndpoints;

SWIFT_CLASS_NAMED("RemoteConfig")
@interface AIQRemoteConfig : NSObject
@property (nonatomic, strong) AIQRemoteConfigEndpoints * _Nullable endpoints;
+ (AIQRemoteConfig * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigEndpoints")
@interface AIQRemoteConfigEndpoints : NSObject
@property (nonatomic, copy) NSString * _Nullable dback;
@property (nonatomic, copy) NSString * _Nullable user;
@property (nonatomic, copy) NSString * _Nullable personalization;
@property (nonatomic, copy) NSString * _Nullable recommendation;
+ (AIQRemoteConfigEndpoints * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigLocalService")
@interface AIQRemoteConfigLocalService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("RemoteConfigService")
@protocol AIQRemoteConfigService
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRemoteConfigLocalService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("RemoteConfigRemoteService")
@interface AIQRemoteConfigRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIQRemoteConfigRemoteService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef APPIER_SWIFT_H
#define APPIER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Appier/Appier.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Appier",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_PROTOCOL_NAMED("AIQUAConfiguration")
@protocol AIQConfiguration
@property (nonatomic, copy) NSString * _Nullable userServerEndpoint;
@property (nonatomic, copy) NSString * _Nullable remoteConfigEndpoint;
@property (nonatomic, copy) NSString * _Nullable dbackEndpoint;
@property (nonatomic, copy) NSString * _Nullable recommendationEndpoint;
@property (nonatomic, copy) NSString * _Nullable personalizationEndpoint;
@property (nonatomic, readonly, copy) NSString * _Nullable appIdentifier;
@property (nonatomic, readonly) NSInteger userIdentifier;
@property (nonatomic, readonly) BOOL isNewUser;
@end


/// An object that represents an action to report to the framework.
SWIFT_CLASS_NAMED("Action")
@interface AIDAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIDAction (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didRedeemCoupon;)
+ (AIDAction * _Nonnull)didRedeemCoupon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didAddToCart;)
+ (AIDAction * _Nonnull)didAddToCart SWIFT_WARN_UNUSED_RESULT;
@end

@class AIDConfiguration;
@class UIViewController;
@class UIScrollView;
@class WKWebView;
@class AIDConversion;
@class NSURL;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS_NAMED("AiDeal")
@interface AIDAiDeal : NSObject
@property (nonatomic, strong) AIDConfiguration * _Nonnull configuration;
/// Configures the API key used to connect to AiDeal servers.
/// This method must be called BEFORE logging view controllers and conversions.
- (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView;
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController webView:(WKWebView * _Nonnull)webView;
/// Stops logging the current page.
/// This method must be called in <code>viewDidDisappear</code>.
- (void)stopLogging;
/// Logs conversion data, and send it to AiDeal servers.
- (void)logConversion:(AIDConversion * _Nonnull)conversion;
- (void)logAction:(AIDAction * _Nonnull)action;
- (void)setDataCollection:(BOOL)enabled;
/// Opens a campaign preview URL.
/// The URL can be either a universal link or a custom URL scheme, and accepts the following query string parameters:
/// <ul>
///   <li>
///     <code>zc_element_id</code>: the campaignâ€™s element identifier
///   </li>
///   <li>
///     <code>zc_coupon_code</code>: the coupon code (optional)
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// <ul>
///   <li>
///     <code>https://yoursite.com/foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
///   <li>
///     <code>yourapp:foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
/// </ul>
- (void)openURL:(NSURL * _Nonnull)url;
/// Notifies that the size of the current view is about to change.
/// Calling this method in <code>UIViewController.viewWillTransition(to:with:)</code> is necessary for applications allowing
/// landscape orientation, otherwise badges will not be correctly positioned after a rotation occurs.
- (void)viewWillTransitionWithTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAiDeal * _Nonnull shared;)
+ (AIDAiDeal * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull offerButtonTappedNotification;)
+ (NSNotificationName _Nonnull)offerButtonTappedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull configurationDidChangeNotification;)
+ (NSNotificationName _Nonnull)configurationDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("AiDealConfiguration")
@interface AIDConfiguration : NSObject
- (void)setAllowsBadgeDisplay:(BOOL)flag;
- (void)setInsetsFromArea:(UIEdgeInsets)insets;
- (void)setBadgeDisplayAreaToInsideLayoutGuides;
- (void)setBadgeDisplayAreaToSafeArea SWIFT_AVAILABILITY(ios,introduced=11);
- (void)setBadgeDisplayAreaToScreen;
- (void)setBadgeDisplayArea:(CGRect)rect;
- (void)offsetBadgePositionByX:(CGFloat)x Y:(CGFloat)y;
- (void)setBadgePosition:(CGPoint)point;
- (void)resetBadgePosition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class QGSdk;

SWIFT_CLASS_NAMED("AppierApp")
@interface APRApp : NSObject
@property (nonatomic, readonly, strong) AIDAiDeal * _Nonnull aiDeal;
@property (nonatomic, readonly, strong) QGSdk * _Nonnull aiqua;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setDataCollection:(BOOL)enabled;
- (void)showConsole;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRApp * _Nonnull sharedApp;)
+ (APRApp * _Nonnull)sharedApp SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6Appier15AppierResources")
@interface AppierResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class AIDConversionItem;

SWIFT_CLASS_NAMED("Conversion")
@interface AIDConversion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic) NSInteger totalQuantity;
@property (nonatomic) double totalPrice;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull couponCodes;
@property (nonatomic, copy) NSArray<AIDConversionItem *> * _Nonnull items;
@property (nonatomic, readonly, copy) NSString * _Nonnull conversionId SWIFT_DEPRECATED_MSG("", "identifier");
@property (nonatomic, copy) NSString * _Nullable conversionName SWIFT_DEPRECATED_MSG("", "name");
@property (nonatomic) NSInteger totalItems SWIFT_DEPRECATED_MSG("", "numberOfItems");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ConversionItem")
@interface AIDConversionItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) double price;
@property (nonatomic) NSInteger quantity;
@property (nonatomic) NSInteger count SWIFT_DEPRECATED_MSG("", "quantity");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CoreDataComponent")
@interface AIQCoreDataComponent : NSObject
@property (nonatomic, strong) NSManagedObjectContext * _Nonnull managedObjectContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCollectionRemoteService")
@interface AIQDataCollectionRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@class AIQDataPointsResponse;

SWIFT_PROTOCOL_NAMED("DataCollectionService")
@protocol AIQDataCollectionService
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end


@interface AIQDataCollectionRemoteService (SWIFT_EXTENSION(Appier)) <AIQDataCollectionService>
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end



SWIFT_CLASS_NAMED("DataPointsResponse")
@interface AIQDataPointsResponse : NSObject
@property (nonatomic) BOOL success;
@property (nonatomic, copy) NSString * _Nullable error;
+ (AIQDataPointsResponse * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("EventLogger")
@protocol AIQEventLogger
- (void)logErrorWithMissingEndpoint:(NSString * _Nonnull)missingEndpoint api:(NSString * _Nonnull)api;
@end


SWIFT_CLASS_NAMED("FrameworkInfo")
@interface APRFrameworkInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buildString;)
+ (NSString * _Nonnull)buildString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AIQInAppAdditionalimeRange;
@class AIQLoggedEvent;

SWIFT_CLASS_NAMED("InAppAdditionalCondition")
@interface AIQInAppAdditionalCondition : NSObject
@property (nonatomic, strong) AIQInAppAdditionalimeRange * _Nonnull timeRange;
+ (AIQInAppAdditionalCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithLoggedEvents:(NSArray<AIQLoggedEvent *> * _Nonnull)loggedEvents SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("InAppAdditionalTimeRange")
@interface AIQInAppAdditionalimeRange : NSObject
@property (nonatomic, readonly) NSInteger durationInMilliSec;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AIQInAppBadgeAlignment, "InAppBadgeAlignment", open) {
  AIQInAppBadgeAlignmentTopLeft = 0,
  AIQInAppBadgeAlignmentTopRight = 1,
};


SWIFT_CLASS_NAMED("InAppBadgeSetting")
@interface AIQInAppBadgeSetting : NSObject
@property (nonatomic) enum AIQInAppBadgeAlignment align;
@property (nonatomic) BOOL asDeepLink;
+ (AIQInAppBadgeSetting * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppMatchCondition")
@interface AIQInAppMatchCondition : NSObject
+ (AIQInAppMatchCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppRemoteService")
@interface AIQInAppRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("InAppService")
@protocol AIQInAppService
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQInAppRemoteService (SWIFT_EXTENSION(Appier)) <AIQInAppService>
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, APRLogType, "LogType", open) {
  APRLogTypeDebug = 0,
  APRLogTypeInfo = 1,
  APRLogTypeWarning = 2,
  APRLogTypeError = 3,
};


SWIFT_CLASS_NAMED("LoggedEvent")
@interface AIQLoggedEvent : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name timestamp:(NSInteger)timestamp parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name dictionaryParameters:(NSDictionary<NSString *, id> * _Nullable)parameters;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LoggedEventDAO")
@interface AIQLoggedEventDAO : NSObject
- (nonnull instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getAllWithLimit:(NSInteger)withLimit SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getLoggedEventEarlierBeforeWithTime:(NSInteger)beforeFromNow SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)deleteOverflowed;
- (NSInteger)deleteOutdated;
- (NSInteger)deleteAll;
- (BOOL)createWithLoggedEvent:(AIQLoggedEvent * _Nonnull)loggedEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSEntityDescription;

SWIFT_CLASS_NAMED("LoggedEventEntity")
@interface LoggedEventEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LoggedEventEntity (SWIFT_EXTENSION(Appier))
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic) int64_t timestamp;
@end


/// An object that prints interpolated strings to the console, and a drop-in replacement for the
/// <code>os.Logger</code> type introduced in iOS 14.
SWIFT_CLASS_NAMED("Logger")
@interface APRLogger : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly) BOOL enabled;
+ (NSString * _Nonnull)descriptionForLevel:(enum APRLogType)level SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaNotificationLogger;)
+ (APRLogger * _Nonnull)aiquaNotificationLogger SWIFT_WARN_UNUSED_RESULT;
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaLogger;)
+ (APRLogger * _Nonnull)aiquaLogger SWIFT_WARN_UNUSED_RESULT;
@end









@class NSURLSession;

SWIFT_CLASS_NAMED("PersonalizationRemoteService")
@interface AIQPersonalizationRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("PersonalizationService")
@protocol AIQPersonalizationService
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQPersonalizationRemoteService (SWIFT_EXTENSION(Appier)) <AIQPersonalizationService>
/// Calling this method only in debug mode
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class NSURLRequest;

SWIFT_CLASS_NAMED("RecommendationRemoteService")
@interface AIQRecommendationRemoteService : NSObject
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("RecommendationService")
@protocol AIQRecommendationService
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRecommendationRemoteService (SWIFT_EXTENSION(Appier)) <AIQRecommendationService>
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class AIQRemoteConfigEndpoints;

SWIFT_CLASS_NAMED("RemoteConfig")
@interface AIQRemoteConfig : NSObject
@property (nonatomic, strong) AIQRemoteConfigEndpoints * _Nullable endpoints;
+ (AIQRemoteConfig * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigEndpoints")
@interface AIQRemoteConfigEndpoints : NSObject
@property (nonatomic, copy) NSString * _Nullable dback;
@property (nonatomic, copy) NSString * _Nullable user;
@property (nonatomic, copy) NSString * _Nullable personalization;
@property (nonatomic, copy) NSString * _Nullable recommendation;
+ (AIQRemoteConfigEndpoints * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigLocalService")
@interface AIQRemoteConfigLocalService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("RemoteConfigService")
@protocol AIQRemoteConfigService
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRemoteConfigLocalService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("RemoteConfigRemoteService")
@interface AIQRemoteConfigRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIQRemoteConfigRemoteService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef APPIER_SWIFT_H
#define APPIER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Appier/Appier.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Appier",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_PROTOCOL_NAMED("AIQUAConfiguration")
@protocol AIQConfiguration
@property (nonatomic, copy) NSString * _Nullable userServerEndpoint;
@property (nonatomic, copy) NSString * _Nullable remoteConfigEndpoint;
@property (nonatomic, copy) NSString * _Nullable dbackEndpoint;
@property (nonatomic, copy) NSString * _Nullable recommendationEndpoint;
@property (nonatomic, copy) NSString * _Nullable personalizationEndpoint;
@property (nonatomic, readonly, copy) NSString * _Nullable appIdentifier;
@property (nonatomic, readonly) NSInteger userIdentifier;
@property (nonatomic, readonly) BOOL isNewUser;
@end


/// An object that represents an action to report to the framework.
SWIFT_CLASS_NAMED("Action")
@interface AIDAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIDAction (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didRedeemCoupon;)
+ (AIDAction * _Nonnull)didRedeemCoupon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAction * _Nonnull didAddToCart;)
+ (AIDAction * _Nonnull)didAddToCart SWIFT_WARN_UNUSED_RESULT;
@end

@class AIDConfiguration;
@class UIViewController;
@class UIScrollView;
@class WKWebView;
@class AIDConversion;
@class NSURL;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS_NAMED("AiDeal")
@interface AIDAiDeal : NSObject
@property (nonatomic, strong) AIDConfiguration * _Nonnull configuration;
/// Configures the API key used to connect to AiDeal servers.
/// This method must be called BEFORE logging view controllers and conversions.
- (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller.
/// This method must be called in <code>viewDidAppear</code>.
/// The first scroll view found in the view controllerâ€™s children views will also be monitored automatically.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController attributes:(NSDictionary<AIDPageAttributeName, id> * _Nonnull)attributes;
/// Starts logging a page represented by a view controller and the specified scroll view.
/// This method must be called in <code>viewDidAppear</code>.
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController scrollView:(UIScrollView * _Nullable)scrollView;
- (void)startLoggingWithViewController:(UIViewController * _Nonnull)viewController webView:(WKWebView * _Nonnull)webView;
/// Stops logging the current page.
/// This method must be called in <code>viewDidDisappear</code>.
- (void)stopLogging;
/// Logs conversion data, and send it to AiDeal servers.
- (void)logConversion:(AIDConversion * _Nonnull)conversion;
- (void)logAction:(AIDAction * _Nonnull)action;
- (void)setDataCollection:(BOOL)enabled;
/// Opens a campaign preview URL.
/// The URL can be either a universal link or a custom URL scheme, and accepts the following query string parameters:
/// <ul>
///   <li>
///     <code>zc_element_id</code>: the campaignâ€™s element identifier
///   </li>
///   <li>
///     <code>zc_coupon_code</code>: the coupon code (optional)
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// <ul>
///   <li>
///     <code>https://yoursite.com/foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
///   <li>
///     <code>yourapp:foo/bar/?zc_element_id=99999&zc_coupon_code=DISCOUNT2000</code>
///   </li>
/// </ul>
- (void)openURL:(NSURL * _Nonnull)url;
/// Notifies that the size of the current view is about to change.
/// Calling this method in <code>UIViewController.viewWillTransition(to:with:)</code> is necessary for applications allowing
/// landscape orientation, otherwise badges will not be correctly positioned after a rotation occurs.
- (void)viewWillTransitionWithTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AIDAiDeal * _Nonnull shared;)
+ (AIDAiDeal * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull offerButtonTappedNotification;)
+ (NSNotificationName _Nonnull)offerButtonTappedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull configurationDidChangeNotification;)
+ (NSNotificationName _Nonnull)configurationDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("AiDealConfiguration")
@interface AIDConfiguration : NSObject
- (void)setAllowsBadgeDisplay:(BOOL)flag;
- (void)setInsetsFromArea:(UIEdgeInsets)insets;
- (void)setBadgeDisplayAreaToInsideLayoutGuides;
- (void)setBadgeDisplayAreaToSafeArea SWIFT_AVAILABILITY(ios,introduced=11);
- (void)setBadgeDisplayAreaToScreen;
- (void)setBadgeDisplayArea:(CGRect)rect;
- (void)offsetBadgePositionByX:(CGFloat)x Y:(CGFloat)y;
- (void)setBadgePosition:(CGPoint)point;
- (void)resetBadgePosition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class QGSdk;

SWIFT_CLASS_NAMED("AppierApp")
@interface APRApp : NSObject
@property (nonatomic, readonly, strong) AIDAiDeal * _Nonnull aiDeal;
@property (nonatomic, readonly, strong) QGSdk * _Nonnull aiqua;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setDataCollection:(BOOL)enabled;
- (void)showConsole;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRApp * _Nonnull sharedApp;)
+ (APRApp * _Nonnull)sharedApp SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6Appier15AppierResources")
@interface AppierResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class AIDConversionItem;

SWIFT_CLASS_NAMED("Conversion")
@interface AIDConversion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic) NSInteger totalQuantity;
@property (nonatomic) double totalPrice;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull couponCodes;
@property (nonatomic, copy) NSArray<AIDConversionItem *> * _Nonnull items;
@property (nonatomic, readonly, copy) NSString * _Nonnull conversionId SWIFT_DEPRECATED_MSG("", "identifier");
@property (nonatomic, copy) NSString * _Nullable conversionName SWIFT_DEPRECATED_MSG("", "name");
@property (nonatomic) NSInteger totalItems SWIFT_DEPRECATED_MSG("", "numberOfItems");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ConversionItem")
@interface AIDConversionItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) double price;
@property (nonatomic) NSInteger quantity;
@property (nonatomic) NSInteger count SWIFT_DEPRECATED_MSG("", "quantity");
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CoreDataComponent")
@interface AIQCoreDataComponent : NSObject
@property (nonatomic, strong) NSManagedObjectContext * _Nonnull managedObjectContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCollectionRemoteService")
@interface AIQDataCollectionRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@class AIQDataPointsResponse;

SWIFT_PROTOCOL_NAMED("DataCollectionService")
@protocol AIQDataCollectionService
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end


@interface AIQDataCollectionRemoteService (SWIFT_EXTENSION(Appier)) <AIQDataCollectionService>
- (void)uploadDataPoints:(NSData * _Nonnull)dataPoints completionHandler:(void (^ _Nonnull)(AIQDataPointsResponse * _Nullable, double, NSError * _Nullable))completionHandler;
@end



SWIFT_CLASS_NAMED("DataPointsResponse")
@interface AIQDataPointsResponse : NSObject
@property (nonatomic) BOOL success;
@property (nonatomic, copy) NSString * _Nullable error;
+ (AIQDataPointsResponse * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("EventLogger")
@protocol AIQEventLogger
- (void)logErrorWithMissingEndpoint:(NSString * _Nonnull)missingEndpoint api:(NSString * _Nonnull)api;
@end


SWIFT_CLASS_NAMED("FrameworkInfo")
@interface APRFrameworkInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buildString;)
+ (NSString * _Nonnull)buildString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AIQInAppAdditionalimeRange;
@class AIQLoggedEvent;

SWIFT_CLASS_NAMED("InAppAdditionalCondition")
@interface AIQInAppAdditionalCondition : NSObject
@property (nonatomic, strong) AIQInAppAdditionalimeRange * _Nonnull timeRange;
+ (AIQInAppAdditionalCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithLoggedEvents:(NSArray<AIQLoggedEvent *> * _Nonnull)loggedEvents SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("InAppAdditionalTimeRange")
@interface AIQInAppAdditionalimeRange : NSObject
@property (nonatomic, readonly) NSInteger durationInMilliSec;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AIQInAppBadgeAlignment, "InAppBadgeAlignment", open) {
  AIQInAppBadgeAlignmentTopLeft = 0,
  AIQInAppBadgeAlignmentTopRight = 1,
};


SWIFT_CLASS_NAMED("InAppBadgeSetting")
@interface AIQInAppBadgeSetting : NSObject
@property (nonatomic) enum AIQInAppBadgeAlignment align;
@property (nonatomic) BOOL asDeepLink;
+ (AIQInAppBadgeSetting * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppMatchCondition")
@interface AIQInAppMatchCondition : NSObject
+ (AIQInAppMatchCondition * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)matchWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppRemoteService")
@interface AIQInAppRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("InAppService")
@protocol AIQInAppService
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQInAppRemoteService (SWIFT_EXTENSION(Appier)) <AIQInAppService>
- (void)fetchInAppCampaignsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)fetchInAppCampaignsWithTimeoutInterval:(double)timeoutInterval :(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, APRLogType, "LogType", open) {
  APRLogTypeDebug = 0,
  APRLogTypeInfo = 1,
  APRLogTypeWarning = 2,
  APRLogTypeError = 3,
};


SWIFT_CLASS_NAMED("LoggedEvent")
@interface AIQLoggedEvent : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name timestamp:(NSInteger)timestamp parameters:(NSString * _Nullable)parameters;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name dictionaryParameters:(NSDictionary<NSString *, id> * _Nullable)parameters;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LoggedEventDAO")
@interface AIQLoggedEventDAO : NSObject
- (nonnull instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getAllWithLimit:(NSInteger)withLimit SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AIQLoggedEvent *> * _Nonnull)getLoggedEventEarlierBeforeWithTime:(NSInteger)beforeFromNow SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)deleteOverflowed;
- (NSInteger)deleteOutdated;
- (NSInteger)deleteAll;
- (BOOL)createWithLoggedEvent:(AIQLoggedEvent * _Nonnull)loggedEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSEntityDescription;

SWIFT_CLASS_NAMED("LoggedEventEntity")
@interface LoggedEventEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LoggedEventEntity (SWIFT_EXTENSION(Appier))
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic) int64_t timestamp;
@end


/// An object that prints interpolated strings to the console, and a drop-in replacement for the
/// <code>os.Logger</code> type introduced in iOS 14.
SWIFT_CLASS_NAMED("Logger")
@interface APRLogger : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly) BOOL enabled;
+ (NSString * _Nonnull)descriptionForLevel:(enum APRLogType)level SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaNotificationLogger;)
+ (APRLogger * _Nonnull)aiquaNotificationLogger SWIFT_WARN_UNUSED_RESULT;
@end


@interface APRLogger (SWIFT_EXTENSION(Appier))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APRLogger * _Nonnull aiquaLogger;)
+ (APRLogger * _Nonnull)aiquaLogger SWIFT_WARN_UNUSED_RESULT;
@end









@class NSURLSession;

SWIFT_CLASS_NAMED("PersonalizationRemoteService")
@interface AIQPersonalizationRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("PersonalizationService")
@protocol AIQPersonalizationService
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQPersonalizationRemoteService (SWIFT_EXTENSION(Appier)) <AIQPersonalizationService>
/// Calling this method only in debug mode
- (void)reportDebugConfigContext:(NSDictionary<NSString *, id> * _Nonnull)context;
- (void)requestPersonalizationConfig:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class NSURLRequest;

SWIFT_CLASS_NAMED("RecommendationRemoteService")
@interface AIQRecommendationRemoteService : NSObject
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration session:(NSURLSession * _Nonnull)session;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("RecommendationService")
@protocol AIQRecommendationService
@property (nonatomic, copy) NSURLRequest * _Nullable observingRequest;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRecommendationRemoteService (SWIFT_EXTENSION(Appier)) <AIQRecommendationService>
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withProductId:(NSString * _Nonnull)productId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (void)getRecommendationWithScenarioId:(NSString * _Nonnull)scenarioId withQueryParameters:(NSDictionary<NSString *, id> * _Nullable)queryStringDict withCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


@class AIQRemoteConfigEndpoints;

SWIFT_CLASS_NAMED("RemoteConfig")
@interface AIQRemoteConfig : NSObject
@property (nonatomic, strong) AIQRemoteConfigEndpoints * _Nullable endpoints;
+ (AIQRemoteConfig * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigEndpoints")
@interface AIQRemoteConfigEndpoints : NSObject
@property (nonatomic, copy) NSString * _Nullable dback;
@property (nonatomic, copy) NSString * _Nullable user;
@property (nonatomic, copy) NSString * _Nullable personalization;
@property (nonatomic, copy) NSString * _Nullable recommendation;
+ (AIQRemoteConfigEndpoints * _Nullable)decodeWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RemoteConfigLocalService")
@interface AIQRemoteConfigLocalService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("RemoteConfigService")
@protocol AIQRemoteConfigService
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface AIQRemoteConfigLocalService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("RemoteConfigRemoteService")
@interface AIQRemoteConfigRemoteService : NSObject
- (nonnull instancetype)initWithConfiguration:(id <AIQConfiguration> _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AIQRemoteConfigRemoteService (SWIFT_EXTENSION(Appier)) <AIQRemoteConfigService>
- (void)fetchRemoteConfigWithCompletionHandler:(void (^ _Nonnull)(AIQRemoteConfig * _Nullable, NSError * _Nullable))completionHandler;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
