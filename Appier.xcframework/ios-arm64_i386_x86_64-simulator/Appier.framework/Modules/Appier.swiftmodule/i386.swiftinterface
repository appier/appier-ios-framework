// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Appier
@_exported import Appier
import CommonCrypto
import CoreGraphics
import Dispatch
import Foundation
import Network
import Swift
import UIKit
import WebKit
import os
import zlib
extension Logger {
  @objc(aiquaLogger) public static let aiqua: Appier.Logger
}
extension Logger {
  @objc(aiquaNotificationLogger) public static let aiquaNotification: Appier.Logger
}
public enum PageType {
  case top
  case category
  case search
  case item
  case cart
  case cartForm
  case conversion
  case myPage
  case login
  case registrationForm
  case registration
  case custom(Swift.String)
}
extension PageType : Swift.RawRepresentable {
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
extension PageType : Swift.Codable, Swift.Hashable {
}
extension PageType : Swift.CaseIterable {
  public static var allCases: [Appier.PageType]
  public typealias AllCases = [Appier.PageType]
}
public struct BadgeConfiguration {
  public var allowsDisplay: Swift.Bool
  public var area: Appier.BadgeDisplayArea
  public var insetsFromArea: UIKit.UIEdgeInsets
  public var positionOverride: Appier.BadgePositionOverride
  public init()
}
public enum BadgeDisplayArea {
  @available(iOS, deprecated: 11)
  case insideLayoutGuides
  @available(iOS 11, *)
  case safeArea
  case screen
  case custom(CoreGraphics.CGRect)
}
public enum BadgePositionOverride {
  case none
  case offset(dx: CoreGraphics.CGFloat, dy: CoreGraphics.CGFloat)
  case custom(CoreGraphics.CGPoint)
  case bottomLeftCorner
  case bottomRightCorner
}
@objc(AIDAction) @objcMembers public class Action : ObjectiveC.NSObject {
  @objc final public let rawValue: Swift.String
  @objc required public init(rawValue: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Action : Swift.RawRepresentable {
  @objc public static let didRedeemCoupon: Appier.Action
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers @objc(AIDAiDeal) @objcMembers final public class AiDeal : ObjectiveC.NSObject {
  @objc final public var configuration: Appier.Configuration
  @objc final public func configure(apiKey: Swift.String)
  @objc(startLoggingWithViewController:) final public func startLogging(_ viewController: UIKit.UIViewController)
  @objc(startLoggingWithViewController:scrollView:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:scrollView:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?)
  @objc final public func stopLogging()
  @objc(logConversion:) final public func log(_ conversion: Appier.Conversion)
  @objc(logAction:) final public func log(_ action: Appier.Action)
  @objc(setDataCollection:) final public func setDataCollection(_ enabled: Swift.Bool)
  @objc(openURL:) final public func open(_ url: Foundation.URL)
  @objc(viewWillTransitionWithTransitionCoordinator:) final public func viewWillTransition(with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc public static let shared: Appier.AiDeal
  @objc public static let offerButtonTappedNotification: Foundation.Notification.Name
  @objc public static let configurationDidChangeNotification: Foundation.Notification.Name
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(AIDConfiguration) @objcMembers public class Configuration : ObjectiveC.NSObject {
  public var badge: Appier.BadgeConfiguration {
    get
    set
  }
  @objc public func setAllowsBadgeDisplay(_ flag: Swift.Bool)
  @objc public func setInsetsFromArea(_ insets: UIKit.UIEdgeInsets)
  @objc public func setBadgeDisplayAreaToInsideLayoutGuides()
  @objc @available(iOS 11, *)
  public func setBadgeDisplayAreaToSafeArea()
  @objc public func setBadgeDisplayAreaToScreen()
  @objc public func setBadgeDisplayArea(_ rect: CoreGraphics.CGRect)
  @objc(offsetBadgePositionByX:Y:) public func offsetBadgePositionBy(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat)
  @objc public func setBadgePosition(_ point: CoreGraphics.CGPoint)
  @objc public func resetBadgePosition()
  @objc override dynamic public init()
  @objc deinit
}
@objc(AIDConversion) @objcMembers public class Conversion : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc public var name: Swift.String?
  @objc public var totalQuantity: Swift.Int
  @objc public var totalPrice: Swift.Double
  @objc public var couponCodes: [Swift.String]
  @objc public var items: [Appier.ConversionItem]
  @objc @available(*, deprecated, renamed: "identifier")
  public var conversionId: Swift.String {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "name")
  public var conversionName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "numberOfItems")
  public var totalItems: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension Conversion : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(AIDConversionItem) @objcMembers public class ConversionItem : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc public var name: Swift.String?
  @objc public var url: Foundation.URL?
  @objc public var price: Swift.Double
  @objc public var quantity: Swift.Int
  @objc @available(*, deprecated, renamed: "quantity")
  public var count: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension ConversionItem : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@available(*, deprecated, renamed: "ConversionItem")
public typealias AIDConversionItem = Appier.ConversionItem
extension Data {
}
@_inheritsConvenienceInitializers @objc public class AppierResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(APRApp) @objcMembers public class AppierApp : ObjectiveC.NSObject {
  @objc public var aiDeal: Appier.AiDeal {
    @objc get
  }
  @objc public var aiqua: Appier.QGSdk {
    @objc get
  }
  @objc override dynamic public init()
  @objc(setDataCollection:) public func setDataCollection(_ enabled: Swift.Bool)
  @objc(sharedApp) public static let shared: Appier.AppierApp
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(APRFrameworkInfo) @objcMembers final public class FrameworkInfo : ObjectiveC.NSObject {
  @objc public static var buildString: Swift.String {
    @objc get
  }
  @objc public static var versionString: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(APRLogger) public class Logger : ObjectiveC.NSObject {
  @objc final public let category: Swift.String
  @objc public var enabled: Swift.Bool {
    @objc get
  }
  @objc(descriptionForLevel:) public static func description(for level: Appier.LogType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(APRLogType) public enum LogType : Swift.Int {
  case debug, info, warning, error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension LogType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Appier.LogType : Swift.Equatable {}
extension Appier.LogType : Swift.Hashable {}
extension Appier.LogType : Swift.RawRepresentable {}
