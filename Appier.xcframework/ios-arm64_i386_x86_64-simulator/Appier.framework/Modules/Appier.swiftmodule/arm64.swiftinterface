// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 effective-4.1.50 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name Appier
@_exported import Appier
import CoreFoundation
import Dispatch
import Foundation
import Security
import Swift
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
}
public protocol SocketEngineWebsocket : Appier.SocketEngineSpec, Appier.WebSocketDelegate {
  func sendWebSocketMessage(_ str: Swift.String, withType type: Appier.SocketEnginePacketType, withData datas: [Foundation.Data])
}
extension SocketEngineWebsocket {
  public func sendWebSocketMessage(_ str: Swift.String, withType type: Appier.SocketEnginePacketType, withData datas: [Foundation.Data])
  public func websocketDidReceiveMessage(socket: Appier.WebSocket, text: Swift.String)
  public func websocketDidReceiveData(socket: Appier.WebSocket, data: Foundation.Data)
}
public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
  public typealias Element = Appier.SocketIOClientOption
  public typealias Index = Swift.Array<Appier.SocketIOClientOption>.Index
  public typealias Iterator = Swift.Array<Appier.SocketIOClientOption>.Iterator
  public typealias SubSequence = Swift.Array<Appier.SocketIOClientOption>.SubSequence
  public var startIndex: Appier.SocketIOClientConfiguration.Index {
    get
  }
  public var endIndex: Appier.SocketIOClientConfiguration.Index {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: Appier.SocketIOClientConfiguration.Index.Stride {
    get
  }
  public var first: Appier.SocketIOClientConfiguration.Element? {
    get
  }
  public subscript(position: Appier.SocketIOClientConfiguration.Index) -> Appier.SocketIOClientConfiguration.Element {
    get
    set(newValue)
  }
  public subscript(bounds: Swift.Range<Appier.SocketIOClientConfiguration.Index>) -> Appier.SocketIOClientConfiguration.SubSequence {
    get
    set(newValue)
  }
  public init(arrayLiteral elements: Appier.SocketIOClientConfiguration.Element...)
  public func makeIterator() -> Appier.SocketIOClientConfiguration.Iterator
  public func index(after i: Appier.SocketIOClientConfiguration.Index) -> Appier.SocketIOClientConfiguration.Index
  public mutating func insert(_ element: Appier.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
  public typealias ArrayLiteralElement = Appier.SocketIOClientConfiguration.Element
  public typealias Indices = Swift.DefaultIndices<Appier.SocketIOClientConfiguration>
}
public protocol SocketEnginePollable : Appier.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [Swift.String] { get set }
  var session: Foundation.URLSession? { get }
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  func sendPollMessage(_ message: Swift.String, withType type: Appier.SocketEnginePacketType, withData datas: [Foundation.Data])
  func stopPolling()
}
extension SocketEnginePollable {
  public func doPoll()
  public func sendPollMessage(_ message: Swift.String, withType type: Appier.SocketEnginePacketType, withData datas: [Foundation.Data])
  public func stopPolling()
}
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: Swift.String, type: Swift.String, args: Any...)
  func error(_ message: Swift.String, type: Swift.String, args: Any...)
}
extension SocketLogger {
  public func log(_ message: Swift.String, type: Swift.String, args: Any...)
  public func error(_ message: Swift.String, type: Swift.String, args: Any...)
}
@objc public protocol SocketEngineSpec {
  @objc weak var client: Appier.SocketEngineClient? { get set }
  @objc var closed: Swift.Bool { get }
  @objc var connected: Swift.Bool { get }
  @objc var connectParams: [Swift.String : Any]? { get set }
  @objc var doubleEncodeUTF8: Swift.Bool { get }
  @objc var cookies: [Foundation.HTTPCookie]? { get }
  @objc var engineQueue: Dispatch.DispatchQueue { get }
  @objc var extraHeaders: [Swift.String : Swift.String]? { get }
  @objc var fastUpgrade: Swift.Bool { get }
  @objc var forcePolling: Swift.Bool { get }
  @objc var forceWebsockets: Swift.Bool { get }
  @objc var polling: Swift.Bool { get }
  @objc var probing: Swift.Bool { get }
  @objc var sid: Swift.String { get }
  @objc var socketPath: Swift.String { get }
  @objc var urlPolling: Foundation.URL { get }
  @objc var urlWebSocket: Foundation.URL { get }
  @objc var websocket: Swift.Bool { get }
  @objc var ws: Appier.WebSocket? { get }
  @objc init(client: Appier.SocketEngineClient, url: Foundation.URL, options: Foundation.NSDictionary?)
  @objc func connect()
  @objc func didError(reason: Swift.String)
  @objc func disconnect(reason: Swift.String)
  @objc func doFastUpgrade()
  @objc func flushWaitingForPostToWebSocket()
  @objc func parseEngineData(_ data: Foundation.Data)
  @objc func parseEngineMessage(_ message: Swift.String, fromPolling: Swift.Bool)
  @objc func write(_ msg: Swift.String, withType type: Appier.SocketEnginePacketType, withData data: [Foundation.Data])
}
@objc public enum SocketEnginePacketType : Swift.Int {
  case open
  case close
  case ping
  case pong
  case message
  case upgrade
  case noop
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SocketIOClientStatus : Swift.Int {
  case notConnected
  case disconnected
  case connecting
  case connected
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class SocketEngine : ObjectiveC.NSObject, Foundation.URLSessionDelegate, Appier.SocketEnginePollable, Appier.SocketEngineWebsocket {
  @objc final public let engineQueue: Dispatch.DispatchQueue
  @objc final public var connectParams: [Swift.String : Any]? {
    @objc get
    @objc set(value)
  }
  final public var postWait: [Swift.String]
  final public var waitingForPoll: Swift.Bool
  final public var waitingForPost: Swift.Bool
  @objc final public var closed: Swift.Bool {
    get
  }
  @objc final public var connected: Swift.Bool {
    get
  }
  @objc final public var cookies: [Foundation.HTTPCookie]? {
    get
  }
  @objc final public var doubleEncodeUTF8: Swift.Bool {
    get
  }
  @objc final public var extraHeaders: [Swift.String : Swift.String]? {
    get
  }
  @objc final public var fastUpgrade: Swift.Bool {
    get
  }
  @objc final public var forcePolling: Swift.Bool {
    get
  }
  @objc final public var forceWebsockets: Swift.Bool {
    get
  }
  final public var invalidated: Swift.Bool {
    get
  }
  @objc final public var polling: Swift.Bool {
    get
  }
  @objc final public var probing: Swift.Bool {
    get
  }
  final public var session: Foundation.URLSession? {
    get
  }
  @objc final public var sid: Swift.String {
    get
  }
  @objc final public var socketPath: Swift.String {
    get
  }
  @objc final public var urlPolling: Foundation.URL {
    get
  }
  @objc final public var urlWebSocket: Foundation.URL {
    get
  }
  @objc final public var websocket: Swift.Bool {
    get
  }
  @objc final public var ws: Appier.WebSocket? {
    get
  }
  @objc weak final public var client: Appier.SocketEngineClient?
  public init(client: Appier.SocketEngineClient, url: Foundation.URL, config: Appier.SocketIOClientConfiguration)
  @objc public convenience init(client: Appier.SocketEngineClient, url: Foundation.URL, options: Foundation.NSDictionary?)
  @objc deinit
  @objc final public func connect()
  @objc final public func didError(reason: Swift.String)
  @objc final public func disconnect(reason: Swift.String)
  @objc final public func doFastUpgrade()
  @objc final public func flushWaitingForPostToWebSocket()
  @objc final public func parseEngineData(_ data: Foundation.Data)
  @objc final public func parseEngineMessage(_ message: Swift.String, fromPolling: Swift.Bool)
  @objc final public func write(_ msg: Swift.String, withType type: Appier.SocketEnginePacketType, withData data: [Foundation.Data])
  final public func websocketDidConnect(socket: Appier.WebSocket)
  final public func websocketDidDisconnect(socket: Appier.WebSocket, error: Foundation.NSError?)
  @objc override dynamic public init()
}
extension SocketEngine {
  final public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
}
public enum SocketAckStatus : Swift.String {
  case noAck
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
  final public let event: Swift.String
  final public let items: [Any]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers final public class SocketAckEmitter : ObjectiveC.NSObject {
  final public var expected: Swift.Bool {
    get
  }
  final public func with(_ items: Appier.SocketData...)
  final public func with(_ items: [Any])
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc final public class OnAckCallback : ObjectiveC.NSObject {
  @objc deinit
  @objc final public func timingOut(after seconds: Swift.Int, callback: @escaping Appier.AckCallback)
  @objc override dynamic public init()
}
public protocol SSLTrustValidator {
  func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
}
@objc open class SSLCert : ObjectiveC.NSObject {
  public init(data: Foundation.Data)
  public init(key: Security.SecKey)
  @objc deinit
  @objc override dynamic public init()
}
open class SSLSecurity : Appier.SSLTrustValidator {
  public var validatedDN: Swift.Bool
  public convenience init(usePublicKeys: Swift.Bool = false)
  public init(certs: [Appier.SSLCert], usePublicKeys: Swift.Bool)
  public func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
  @objc deinit
}
@objc open class SocketIOClient : ObjectiveC.NSObject, Appier.SocketEngineClient {
  final public let socketURL: Foundation.URL
  public var engine: Appier.SocketEngineSpec? {
    get
  }
  public var status: Appier.SocketIOClientStatus {
    get
  }
  public var forceNew: Swift.Bool
  public var handleQueue: Dispatch.DispatchQueue
  public var nsp: Swift.String
  public var config: Appier.SocketIOClientConfiguration
  public var reconnects: Swift.Bool
  public var reconnectWait: Swift.Int
  public var sid: Swift.String? {
    get
  }
  @objc public init(socketURL: Foundation.URL, nsp: Swift.String)
  public init(socketURL: Foundation.URL, config: Appier.SocketIOClientConfiguration = [])
  public convenience init(socketURL: Foundation.NSURL, config: Foundation.NSDictionary?)
  @objc deinit
  @objc open func connect()
  open func connect(timeoutAfter: Swift.Int, withHandler handler: (() -> Swift.Void)?)
  @objc open func disconnect()
  open func emit(_ event: Swift.String, _ items: Appier.SocketData...)
  @objc(emit:withItems:) open func emit(_ event: Swift.String, with items: [Any])
  open func emitWithAck(_ event: Swift.String, _ items: Appier.SocketData...) -> Appier.OnAckCallback
  @objc(emitWithAck:withItems:) open func emitWithAck(_ event: Swift.String, with items: [Any]) -> Appier.OnAckCallback
  @objc open func engineDidClose(reason: Swift.String)
  @objc open func engineDidError(reason: Swift.String)
  @objc open func engineDidOpen(reason: Swift.String)
  open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
  open func leaveNamespace()
  open func joinNamespace(_ namespace: Swift.String)
  open func off(_ event: Swift.String)
  open func off(id: Foundation.UUID)
  @discardableResult
  @objc open func on(_ event: Swift.String, callback: @escaping Appier.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func on(clientEvent event: Appier.SocketClientEvent, callback: @escaping Appier.NormalCallback) -> Foundation.UUID
  @discardableResult
  @objc open func once(_ event: Swift.String, callback: @escaping Appier.NormalCallback) -> Foundation.UUID
  open func onAny(_ handler: @escaping (Appier.SocketAnyEvent) -> Swift.Void)
  @objc public func parseEngineMessage(_ msg: Swift.String)
  @objc public func parseEngineBinaryData(_ data: Foundation.Data)
  open func reconnect()
  open func removeAllHandlers()
  @objc override dynamic public init()
}
public enum SocketIOClientOption {
  case connectParams([Swift.String : Any])
  case cookies([Foundation.HTTPCookie])
  case doubleEncodeUTF8(Swift.Bool)
  case extraHeaders([Swift.String : Swift.String])
  case forceNew(Swift.Bool)
  case forcePolling(Swift.Bool)
  case forceWebsockets(Swift.Bool)
  case handleQueue(Dispatch.DispatchQueue)
  case log(Swift.Bool)
  case logger(Appier.SocketLogger)
  case nsp(Swift.String)
  case path(Swift.String)
  case reconnects(Swift.Bool)
  case reconnectAttempts(Swift.Int)
  case reconnectWait(Swift.Int)
  case secure(Swift.Bool)
  case security(Appier.SSLSecurity)
  case selfSigned(Swift.Bool)
  case sessionDelegate(Foundation.URLSessionDelegate)
  case voipEnabled(Swift.Bool)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: Appier.SocketIOClientOption, rhs: Appier.SocketIOClientOption) -> Swift.Bool
}
public var WebsocketDidConnectNotification: Swift.String
public var WebsocketDidDisconnectNotification: Swift.String
public var WebsocketDisconnectionErrorKeyName: Swift.String
public protocol WebSocketDelegate : AnyObject {
  func websocketDidConnect(socket: Appier.WebSocket)
  func websocketDidDisconnect(socket: Appier.WebSocket, error: Foundation.NSError?)
  func websocketDidReceiveMessage(socket: Appier.WebSocket, text: Swift.String)
  func websocketDidReceiveData(socket: Appier.WebSocket, data: Foundation.Data)
}
public protocol WebSocketPongDelegate : AnyObject {
  func websocketDidReceivePong(socket: Appier.WebSocket, data: Foundation.Data?)
}
@objc open class WebSocket : ObjectiveC.NSObject, Foundation.StreamDelegate {
  public enum CloseCode : Swift.UInt16 {
    case normal
    case goingAway
    case protocolError
    case protocolUnhandledType
    case noStatusReceived
    case encoding
    case policyViolated
    case messageTooBig
    public typealias RawValue = Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public static var ErrorDomain: Swift.String
  public var callbackQueue: Dispatch.DispatchQueue
  weak public var delegate: Appier.WebSocketDelegate?
  weak public var pongDelegate: Appier.WebSocketPongDelegate?
  public var onConnect: (() -> Swift.Void)?
  public var onDisconnect: ((Foundation.NSError?) -> Swift.Void)?
  public var onText: ((Swift.String) -> Swift.Void)?
  public var onData: ((Foundation.Data) -> Swift.Void)?
  public var onPong: ((Foundation.Data?) -> Swift.Void)?
  public var headers: [Swift.String : Swift.String]
  public var voipEnabled: Swift.Bool
  public var disableSSLCertValidation: Swift.Bool
  public var security: Appier.SSLTrustValidator?
  public var enabledSSLCipherSuites: [Security.SSLCipherSuite]?
  public var origin: Swift.String?
  public var timeout: Swift.Int
  public var isConnected: Swift.Bool {
    get
  }
  public var currentURL: Foundation.URL {
    get
  }
  public init(url: Foundation.URL, protocols: [Swift.String]? = nil)
  public convenience init(url: Foundation.URL, writeQueueQOS: Foundation.QualityOfService, protocols: [Swift.String]? = nil)
  open func connect()
  open func disconnect(forceTimeout: Foundation.TimeInterval? = nil, closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  open func write(string: Swift.String, completion: (() -> ())? = nil)
  open func write(data: Foundation.Data, completion: (() -> ())? = nil)
  open func write(ping: Foundation.Data, completion: (() -> ())? = nil)
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class SocketClientManager : ObjectiveC.NSObject {
  public static var sharedManager: Appier.SocketClientManager
  open subscript(string: Swift.String) -> Appier.SocketIOClient? {
    get
    set(socket)
  }
  open func addSocket(_ socket: Appier.SocketIOClient, labeledAs label: Swift.String)
  @discardableResult
  open func removeSocket(withLabel label: Swift.String) -> Appier.SocketIOClient?
  @discardableResult
  open func removeSocket(_ socket: Appier.SocketIOClient) -> Appier.SocketIOClient?
  open func removeSockets()
  @objc deinit
  @objc override dynamic public init()
}
public protocol SocketData {
  func socketRepresentation() throws -> Appier.SocketData
}
extension SocketData {
  public func socketRepresentation() -> Appier.SocketData
}
extension Array : Appier.SocketData {
}
extension Bool : Appier.SocketData {
}
extension Dictionary : Appier.SocketData {
}
extension Double : Appier.SocketData {
}
extension Int : Appier.SocketData {
}
extension NSArray : Appier.SocketData {
}
extension Data : Appier.SocketData {
}
extension NSData : Appier.SocketData {
}
extension NSDictionary : Appier.SocketData {
}
extension NSString : Appier.SocketData {
}
extension NSNull : Appier.SocketData {
}
extension String : Appier.SocketData {
}
public typealias AckCallback = ([Any]) -> Swift.Void
public typealias NormalCallback = ([Any], Appier.SocketAckEmitter) -> Swift.Void
public enum SocketClientEvent : Swift.String {
  case connect
  case disconnect
  case error
  case reconnect
  case reconnectAttempt
  case statusChange
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Appier.SocketIOClientOption : Swift.Equatable {}
extension Appier.SocketIOClientOption : Swift.CustomStringConvertible {}
