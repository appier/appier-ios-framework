// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Appier
@_exported import Appier
import CommonCrypto
import CoreFoundation
import CoreGraphics
import Dispatch
import Foundation
import Security
import Swift
import UIKit
import WebKit
import os
import zlib
extension PageType : Swift.Codable {
}
public struct BadgeConfiguration {
  public init()
}
public enum BadgeDisplayArea {
  @available(iOS, deprecated: 11)
  case insideCurrentViewLayoutGuides
  @available(iOS 11, *)
  case insideCurrentViewSafeArea
  public static func == (a: Appier.BadgeDisplayArea, b: Appier.BadgeDisplayArea) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum BadgePosition : Swift.String, Swift.Codable {
  case bottomLeftCorner, bottomRightCorner
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct BadgePositioningContext {
  public init(configuration: Appier.BadgeConfiguration, position: Appier.BadgePosition)
  public func frameInWindowCoordinates(currentViewController: UIKit.UIViewController?) -> CoreGraphics.CGRect
}
@objc @_hasMissingDesignatedInitializers public class CampaignPresenterView : ObjectiveC.NSObject {
  weak public var presenterViewController: UIKit.UIViewController?
  @objc deinit
  @objc override dynamic public init()
}
extension CampaignPresenterView {
  public func presentOffer(contentHTML: Swift.String, css: Swift.String)
  public func dismissOffer()
  public func presentCoupon(contentHTML: Swift.String, css: Swift.String, couponCode: Swift.String, requestCopyBlock: (() -> Swift.Void)? = nil)
  public func showBadge(text: Swift.String?, backgroundColor: UIKit.UIColor, imageURL: Foundation.URL, frame: CoreGraphics.CGRect)
  public func setBadgeText(_ text: Swift.String?)
  public func setBadgeFrame(_ frame: CoreGraphics.CGRect, animated: Swift.Bool)
  public func setBadgeHidden(_ hidden: Swift.Bool)
  public func removeBadge()
  public func showToast(message: Swift.String)
}
extension CampaignPresenterView : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
@_hasMissingDesignatedInitializers @objc(AIDAiDeal) @objcMembers final public class AiDeal : ObjectiveC.NSObject {
  final public let configuration: Appier.Configuration
  @objc final public var presenterView: Appier.CampaignPresenterView? {
    @objc get
  }
  @objc final public func configure(apiKey: Swift.String)
  @objc(startLoggingWithViewController:) final public func startLogging(_ viewController: UIKit.UIViewController)
  @objc(startLoggingWithViewController:scrollView:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:attributes:) final public func startLogging(_ viewController: UIKit.UIViewController, attributes: [Appier.Page.AttributeName : Any])
  @objc(startLoggingWithViewController:scrollView:) final public func startLogging(_ viewController: UIKit.UIViewController, scrollView: UIKit.UIScrollView?)
  @objc final public func stopLogging()
  @objc(logConversion:) final public func log(_ conversion: Appier.Conversion)
  @objc(setDataCollection:) final public func setDataCollection(_ enabled: Swift.Bool)
  @objc(openURL:) final public func open(_ url: Foundation.URL)
  @objc(viewWillTransitionWithTransitionCoordinator:) final public func viewWillTransition(with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc public static let shared: Appier.AiDeal
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class Configuration {
  final public let badge: Appier.BadgeConfiguration
  @objc deinit
}
@objc(AIDConversion) @objcMembers public class Conversion : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc public var name: Swift.String?
  @objc public var totalQuantity: Swift.Int
  @objc public var totalPrice: Swift.Double
  @objc public var couponCodes: [Swift.String]
  @objc public var items: [Appier.ConversionItem]
  @objc @available(*, deprecated, renamed: "identifier")
  public var conversionId: Swift.String {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "name")
  public var conversionName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "numberOfItems")
  public var totalItems: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension Conversion : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(AIDConversionItem) @objcMembers public class ConversionItem : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc public var name: Swift.String?
  @objc public var url: Foundation.URL?
  @objc public var price: Swift.Double
  @objc public var quantity: Swift.Int
  @objc @available(*, deprecated, renamed: "quantity")
  public var count: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(identifier: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension ConversionItem : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@available(*, deprecated, renamed: "ConversionItem")
public typealias AIDConversionItem = Appier.ConversionItem
@_inheritsConvenienceInitializers @available(*, deprecated)
@objc @objcMembers final public class AIDManager : ObjectiveC.NSObject {
  @objc @available(*, deprecated, renamed: "configure(apiKey:)")
  final public func initWithApiKey(_ key: Swift.String)
  @objc @available(*, deprecated, renamed: "startLogging")
  final public func initPage(_ vctl: UIKit.UIViewController, PageType: Swift.String, Scrollable: UIKit.UIScrollView?, IsLogin: Swift.Bool, ItemPrice: Foundation.NSNumber?, CartPrice: Foundation.NSNumber?)
  @objc @available(*, deprecated, renamed: "startLogging")
  final public func initPage(_ vctl: UIKit.UIViewController, pageType: Swift.String, scrollable: UIKit.UIScrollView?, isLogin: Swift.Bool, itemPrice: Foundation.NSNumber?, cartPrice: Foundation.NSNumber?)
  @objc @available(*, deprecated)
  final public func deinitPage()
  @objc @available(*, deprecated)
  final public func sendConversionInfo(_ conversionInfo: Appier.Conversion)
  @objc @available(*, deprecated, renamed: "shared")
  public static func instance() -> Appier.AIDManager
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class AppierResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Appier.BadgeDisplayArea : Swift.Equatable {}
extension Appier.BadgeDisplayArea : Swift.Hashable {}
extension Appier.BadgePosition : Swift.Equatable {}
extension Appier.BadgePosition : Swift.Hashable {}
extension Appier.BadgePosition : Swift.RawRepresentable {}
