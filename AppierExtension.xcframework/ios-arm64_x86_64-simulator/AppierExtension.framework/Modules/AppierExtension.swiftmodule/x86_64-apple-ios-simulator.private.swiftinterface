// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppierExtension
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
@_exported import AppierExtension
import CommonCrypto
import CoreTelephony
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_inheritsConvenienceInitializers @objc(APRDeviceInfo) @objcMembers public class DeviceInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension AppierExtension.DeviceInfo {
  @objc public static func optOutSet() -> Foundation.NSNumber
  @objc public static func IDFA() -> Swift.String
  @objc public static func IDFV() -> Swift.String
  @objc public static func systemVersion() -> Swift.String
  @objc public static func deviceModel() -> Swift.String
  @objc public static func modelName() -> Swift.String
  @objc public static func deviceName() -> Swift.String
  @objc public static func language() -> Swift.String
  @objc public static func timeZone() -> Swift.String
  @objc public static func appVersion() -> Swift.String
  @objc public static func appBuildNumber() -> Swift.String
  @objc public static func appBundleIdentifier() -> Swift.String
  @objc public static func diskSpace() -> [Swift.AnyHashable : Any]?
  @objc public static func coreTelephonyNetwork() -> Swift.String
  @objc public static func networkType() -> Swift.String
  @objc public static func simCardInfo() -> [Swift.String : Swift.String]
  @objc public static func richPushSupported() -> Swift.Bool
  @objc public static func systemVersionEqualTo(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionGreaterThan(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionGreaterThanOrEqualTo(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionLessThan(_ version: Swift.String) -> Swift.Bool
  @objc public static func systemVersionLessThanOrEqualTo(_ version: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(APRFrameworkInfo) @objcMembers final public class FrameworkInfo : ObjectiveC.NSObject {
  @objc public static var buildString: Swift.String {
    @objc get
  }
  @objc public static var versionString: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension AppierExtension.Logger {
  @objc(aiquaNotificationLogger) public static let aiquaNotification: AppierExtension.Logger
}
@_hasMissingDesignatedInitializers @objc(APRLogger) public class Logger : ObjectiveC.NSObject {
  @objc final public let category: Swift.String
  @objc public var enabled: Swift.Bool {
    @objc get
  }
  @objc(descriptionForLevel:) public static func description(for level: AppierExtension.LogType) -> Swift.String
  @objc deinit
}
@objc(APRLogType) public enum LogType : Swift.Int {
  case debug, info, warning, error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AppierExtension.LogType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc extension Foundation.NSString {
  @objc dynamic public func isValidStr() -> Swift.Bool
  @objc dynamic public func encodedURL() -> Foundation.URL?
  @objc dynamic public func getAppSecret() -> Foundation.NSString
  @objc dynamic public func isStringContainsNewLineCharacter() -> Swift.Bool
  @objc dynamic public var SHA256string: Foundation.NSString {
    @objc get
  }
}
extension Swift.String {
  public func isValidStr() -> Swift.Bool
  public func encodedURL() -> Foundation.URL?
  public func getAppSecret() -> Swift.String
  public func isStringContainsNewLineCharacter() -> Swift.Bool
}
public protocol URLSessionProtocol {
  func dataTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  func dataTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  func downloadTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.URL?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDownloadTask
}
extension Foundation.URLSession : AppierExtension.URLSessionProtocol {
}
extension AppierExtension.LogType : Swift.Equatable {}
extension AppierExtension.LogType : Swift.Hashable {}
extension AppierExtension.LogType : Swift.RawRepresentable {}
